diff --git a/packages/car-management-api/src/api/app/features/auth/index.ts b/packages/car-management-api/src/api/app/features/auth/index.ts
index 554f781..098b4a6 100644
--- a/packages/car-management-api/src/api/app/features/auth/index.ts
+++ b/packages/car-management-api/src/api/app/features/auth/index.ts
@@ -1,4 +1,5 @@
-import { wechatClient } from "@/lib/wechat";
+import { prisma } from "@/lib/db";
+import { WeChatClient } from "@/lib/wechat";
 import { zValidator } from "@hono/zod-validator";
 import { Hono } from "hono";
 import { appLoginSchema } from "./schema";
@@ -9,6 +10,8 @@ const app = new Hono();
 app.post(
   "/login",
   async (c, next) => {
+    // Note: This middleware is a workaround to inject tenantId from URL into body for validation.
+    // The tenantId is from the path /tenants/:tenantId/auth/login
     const tenantId = c.req.param("tenantId");
     const body = await c.req.json();
     body.tenantId = tenantId;
@@ -19,6 +22,13 @@ app.post(
   async (c) => {
     const { code, tenantId } = c.req.valid("json");
 
+    const tenant = await prisma.tenant.findUnique({ where: { id: tenantId } });
+
+    if (!tenant || !tenant.appId || !tenant.appSecret) {
+      return c.json({ message: "Tenant WeChat configuration is missing or invalid." }, 400);
+    }
+
+    const wechatClient = new WeChatClient(tenant.appId, tenant.appSecret);
     const { openid, unionid } = await wechatClient.code2Session(code);
     const { token, user } = await loginOrRegister(tenantId, openid, unionid);
     return c.json({ token, user });
diff --git a/packages/car-management-api/src/api/app/features/car-categories/service.ts b/packages/car-management-api/src/api/app/features/car-categories/service.ts
index 3644b1a..f532b9d 100644
--- a/packages/car-management-api/src/api/app/features/car-categories/service.ts
+++ b/packages/car-management-api/src/api/app/features/car-categories/service.ts
@@ -27,15 +27,11 @@ export const getAllCarCategories = async (tenantId: string): Promise<CarCategory
         };
       }
 
-      const prices = c.carTrims.map((trim) => trim.currentPrice.toNumber());
-      const minPrice = Math.min(...prices);
-      const maxPrice = Math.max(...prices);
-
       return {
         ...c,
         isArchived,
-        minPrice,
-        maxPrice,
+        minPrice: c.minPrice.toNumber(),
+        maxPrice: c.maxPrice.toNumber(),
       };
     })
     .filter((c) => !c.isArchived);
@@ -62,14 +58,10 @@ export const getCarCategoryById = async (tenantId: string, id: string): Promise<
     };
   }
 
-  const prices = category.carTrims.map((trim) => trim.currentPrice.toNumber());
-  const minPrice = Math.min(...prices);
-  const maxPrice = Math.max(...prices);
-
   return {
     ...category,
     isArchived,
-    minPrice,
-    maxPrice,
+    minPrice: category.minPrice.toNumber(),
+    maxPrice: category.maxPrice.toNumber(),
   };
 };
diff --git a/packages/car-management-api/src/api/app/features/car-categories/types.ts b/packages/car-management-api/src/api/app/features/car-categories/types.ts
index 9f36db6..eb19619 100644
--- a/packages/car-management-api/src/api/app/features/car-categories/types.ts
+++ b/packages/car-management-api/src/api/app/features/car-categories/types.ts
@@ -1,8 +1,8 @@
-import type { CarCategory } from "@prisma/client";
+import type { CarCategory as PrismaCarCategory } from "@prisma/client";
 
-export type CarCategory = CarCategory;
+export type CarCategory = PrismaCarCategory;
 
-export type CarCategoryWithIsArchived = CarCategory & {
+export type CarCategoryWithIsArchived = Omit<PrismaCarCategory, "minPrice" | "maxPrice"> & {
   isArchived: boolean;
   minPrice: number | null;
   maxPrice: number | null;
diff --git a/packages/car-management-api/src/api/app/features/contact-us-config/service.ts b/packages/car-management-api/src/api/app/features/contact-us-config/service.ts
index 0e64a6e..698c011 100644
--- a/packages/car-management-api/src/api/app/features/contact-us-config/service.ts
+++ b/packages/car-management-api/src/api/app/features/contact-us-config/service.ts
@@ -1,7 +1,14 @@
 import { prisma as db } from "../../../../lib/db";
+import { transformContactUsConfig } from "../../../../lib/transform";
 
 export async function getContactUsConfig(tenantId: string) {
-  return db.contactUsConfig.findUnique({
+  const config = await db.contactUsConfig.findUnique({
     where: { tenantId },
   });
-} 
\ No newline at end of file
+
+  if (!config) {
+    return null;
+  }
+
+  return transformContactUsConfig(config);
+}
diff --git a/packages/car-management-api/src/api/app/features/users/index.ts b/packages/car-management-api/src/api/app/features/users/index.ts
index 736fcd1..35f3d2c 100644
--- a/packages/car-management-api/src/api/app/features/users/index.ts
+++ b/packages/car-management-api/src/api/app/features/users/index.ts
@@ -1,4 +1,5 @@
-import { wechatClient } from "@/lib/wechat";
+import { prisma } from "@/lib/db";
+import { WeChatClient } from "@/lib/wechat";
 import { zValidator } from "@hono/zod-validator";
 import type { User } from "@prisma/client";
 import { Hono } from "hono";
@@ -22,11 +23,18 @@ app.post("/current/phone-number", zValidator("json", updatePhoneNumberSchema), a
   const user = c.get("user") as User;
   const { code } = c.req.valid("json");
 
-  const { phoneNumber } = (await wechatClient.getPhoneNumber(code)) ?? {};
-  if (!phoneNumber) {
+  const tenant = await prisma.tenant.findUnique({ where: { id: user.tenantId } });
+  if (!tenant || !tenant.appId || !tenant.appSecret) {
+    return c.json({ message: "Tenant WeChat configuration is missing or invalid." }, 400);
+  }
+
+  const wechatClient = new WeChatClient(tenant.appId, tenant.appSecret);
+  const phoneInfo = await wechatClient.getPhoneNumber(code);
+
+  if (!phoneInfo?.phoneNumber) {
     throw new HTTPException(400, { message: "Invalid code from wechat" });
   }
-  const updatedUser = await updateUserPhoneNumber(user.tenantId, user.openId, phoneNumber);
+  const updatedUser = await updateUserPhoneNumber(user.tenantId, user.openId, phoneInfo.phoneNumber);
   return c.json(updatedUser);
 });
 
