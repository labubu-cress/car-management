datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdminRole {
  super_admin
  admin
  tenant_viewer
}

enum TenantStatus {
  active
  inactive
}

enum UserMessageStatus {
  PENDING
  PROCESSED
}

model Tenant {
  id        String       @id @default(cuid())
  name      String
  appId     String       @unique
  appSecret String
  status    TenantStatus @default(active)
  config    Json         @default("{}")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  users            User[]
  adminUsers       AdminUser[]
  vehicleScenarios VehicleScenario[]
  carCategories    CarCategory[]
  carTrims         CarTrim[]
  faqs             Faq[]

  homepageConfig  HomepageConfig?
  contactUsConfig ContactUsConfig?
  userMessages    UserMessage[]
}

model AdminUser {
  id                String        @id @default(cuid())
  username          String        @unique
  passwordHash      String
  role              AdminRole
  tenantId          String?
  tenant            Tenant?       @relation(fields: [tenantId], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  processedMessages UserMessage[]

  @@index([tenantId])
}

model User {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  nickname    String
  avatarUrl   String
  phoneNumber String
  openId      String
  unionId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  favoriteCarTrims UserFavoriteCarTrim[]
  messages         UserMessage[]

  @@unique([tenantId, openId])
  @@index([tenantId])
}

model VehicleScenario {
  id            String        @id @default(cuid())
  tenantId      String
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  name          String
  description   String
  image         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  carCategories CarCategory[]

  @@index([tenantId])
}

// car model
model CarCategory {
  id                String          @id @default(cuid())
  tenantId          String
  tenant            Tenant          @relation(fields: [tenantId], references: [id])
  name              String
  minPrice          Decimal         @default(0)
  maxPrice          Decimal         @default(0)
  image             String
  badge             String?
  tags              Json // String[]
  highlights        Json // CarFeature[]
  interiorImages    Json // String[]
  exteriorImages    Json // String[]
  offerPictures     Json // String[]
  displayOrder      Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  carTrims          CarTrim[]
  vehicleScenarioId String
  vehicleScenario   VehicleScenario @relation(fields: [vehicleScenarioId], references: [id])

  @@index([tenantId])
  @@index([vehicleScenarioId])
}

model CarTrim {
  id             String      @id @default(cuid())
  tenantId       String
  tenant         Tenant      @relation(fields: [tenantId], references: [id])
  name           String
  subtitle       String
  configImageUrl String?
  badge          String?
  originalPrice  Decimal
  currentPrice   Decimal
  priceOverrideText String?
  features       Json // CarFeature[]
  categoryId     String
  category       CarCategory @relation(fields: [categoryId], references: [id])
  displayOrder   Int         @default(0)
  isArchived     Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  favoritedBy UserFavoriteCarTrim[]

  @@index([tenantId])
  @@index([categoryId])
}

model HomepageConfig {
  id              String   @id @default(cuid())
  tenantId        String   @unique
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  firstTitle      String
  firstTitleIcon  String
  secondTitle     String
  secondTitleIcon String
  bannerImage     String
  benefitsImage   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserFavoriteCarTrim {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carTrimId String
  carTrim   CarTrim  @relation(fields: [carTrimId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, carTrimId])
  @@index([userId])
}

model ContactUsConfig {
  id                      String   @id @default(cuid())
  tenantId                String   @unique
  tenant                  Tenant   @relation(fields: [tenantId], references: [id])
  contactPhoneDescription String?
  contactPhoneNumber      String?
  contactEmailDescription String?
  contactEmail            String?
  workdays                Json? // array of numbers from 0 (Sunday) to 6 (Saturday)
  workStartTime           Int?
  workEndTime             Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  icon      String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, question])
}

// 用户反馈
model UserMessage {
  id            String            @id @default(cuid())
  tenantId      String
  tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  name          String
  phone         String
  message       String
  status        UserMessageStatus @default(PENDING)
  processedAt   DateTime?
  processedById String?
  processedBy   AdminUser?        @relation(fields: [processedById], references: [id], onDelete: SetNull)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
  @@index([tenantId])
}

model SystemConfig {
  id  String @id @default(cuid())
  key String
}
