diff --git a/.cursorrules b/.cursorrules
index 4473e58..ee36d1f 100644
--- a/.cursorrules
+++ b/.cursorrules
@@ -1 +1,2 @@
-请始终用中文回复用户的问题
\ No newline at end of file
+请始终用中文回复用户的问题
+这是一个monorepo, 安装包或运行命令的时候注意这点。
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 2f2cc77..6676b22 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -453,6 +453,27 @@
         "node": ">=18"
       }
     },
+    "node_modules/@hono/node-server": {
+      "version": "0.2.4",
+      "resolved": "https://registry.npmmirror.com/@hono/node-server/-/node-server-0.2.4.tgz",
+      "integrity": "sha512-oFIOpEnikeCLTfU3PXMdWTB7gglkmtrXu7e88Tr4BPVOIPLUgBmwnfj/LzqIVEpy2gSU/lcEZsmJyQxC+zkErQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@remix-run/web-fetch": "^4.3.2",
+        "@remix-run/web-file": "^3.0.2",
+        "@remix-run/web-stream": "^1.0.3"
+      }
+    },
+    "node_modules/@hono/zod-validator": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmmirror.com/@hono/zod-validator/-/zod-validator-0.2.2.tgz",
+      "integrity": "sha512-dSDxaPV70Py8wuIU2QNpoVEIOSzSXZ/6/B/h4xA7eOMz7+AarKTSGV8E6QwrdcCbBLkpqfJ4Q2TmBO0eP1tCBQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "hono": ">=3.9.0",
+        "zod": "^3.19.1"
+      }
+    },
     "node_modules/@jest/schemas": {
       "version": "29.6.3",
       "resolved": "https://registry.npmmirror.com/@jest/schemas/-/schemas-29.6.3.tgz",
@@ -517,6 +538,62 @@
         "@noble/hashes": "^1.1.5"
       }
     },
+    "node_modules/@remix-run/web-blob": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmmirror.com/@remix-run/web-blob/-/web-blob-3.1.0.tgz",
+      "integrity": "sha512-owGzFLbqPH9PlKb8KvpNJ0NO74HWE2euAn61eEiyCXX/oteoVzTVSN8mpLgDjaxBf2btj5/nUllSUgpyd6IH6g==",
+      "license": "MIT",
+      "dependencies": {
+        "@remix-run/web-stream": "^1.1.0",
+        "web-encoding": "1.1.5"
+      }
+    },
+    "node_modules/@remix-run/web-fetch": {
+      "version": "4.4.2",
+      "resolved": "https://registry.npmmirror.com/@remix-run/web-fetch/-/web-fetch-4.4.2.tgz",
+      "integrity": "sha512-jgKfzA713/4kAW/oZ4bC3MoLWyjModOVDjFPNseVqcJKSafgIscrYL9G50SurEYLswPuoU3HzSbO0jQCMYWHhA==",
+      "license": "MIT",
+      "dependencies": {
+        "@remix-run/web-blob": "^3.1.0",
+        "@remix-run/web-file": "^3.1.0",
+        "@remix-run/web-form-data": "^3.1.0",
+        "@remix-run/web-stream": "^1.1.0",
+        "@web3-storage/multipart-parser": "^1.0.0",
+        "abort-controller": "^3.0.0",
+        "data-uri-to-buffer": "^3.0.1",
+        "mrmime": "^1.0.0"
+      },
+      "engines": {
+        "node": "^10.17 || >=12.3"
+      }
+    },
+    "node_modules/@remix-run/web-file": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmmirror.com/@remix-run/web-file/-/web-file-3.1.0.tgz",
+      "integrity": "sha512-dW2MNGwoiEYhlspOAXFBasmLeYshyAyhIdrlXBi06Duex5tDr3ut2LFKVj7tyHLmn8nnNwFf1BjNbkQpygC2aQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@remix-run/web-blob": "^3.1.0"
+      }
+    },
+    "node_modules/@remix-run/web-form-data": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmmirror.com/@remix-run/web-form-data/-/web-form-data-3.1.0.tgz",
+      "integrity": "sha512-NdeohLMdrb+pHxMQ/Geuzdp0eqPbea+Ieo8M8Jx2lGC6TBHsgHzYcBvr0LyPdPVycNRDEpWpiDdCOdCryo3f9A==",
+      "license": "MIT",
+      "dependencies": {
+        "web-encoding": "1.1.5"
+      }
+    },
+    "node_modules/@remix-run/web-stream": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmmirror.com/@remix-run/web-stream/-/web-stream-1.1.0.tgz",
+      "integrity": "sha512-KRJtwrjRV5Bb+pM7zxcTJkhIqWWSy+MYsIxHK+0m5atcznsf15YwUBWHWulZerV2+vvHH1Lp1DD7pw6qKW8SgA==",
+      "license": "MIT",
+      "dependencies": {
+        "web-streams-polyfill": "^3.1.1"
+      }
+    },
     "node_modules/@rollup/rollup-android-arm-eabi": {
       "version": "4.41.1",
       "resolved": "https://registry.npmmirror.com/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.41.1.tgz",
@@ -849,27 +926,6 @@
         "@types/node": "*"
       }
     },
-    "node_modules/@types/body-parser": {
-      "version": "1.19.5",
-      "resolved": "https://registry.npmmirror.com/@types/body-parser/-/body-parser-1.19.5.tgz",
-      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/connect": "*",
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/connect": {
-      "version": "3.4.38",
-      "resolved": "https://registry.npmmirror.com/@types/connect/-/connect-3.4.38.tgz",
-      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
     "node_modules/@types/cookiejar": {
       "version": "2.1.5",
       "resolved": "https://registry.npmmirror.com/@types/cookiejar/-/cookiejar-2.1.5.tgz",
@@ -884,39 +940,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/express": {
-      "version": "4.17.22",
-      "resolved": "https://registry.npmmirror.com/@types/express/-/express-4.17.22.tgz",
-      "integrity": "sha512-eZUmSnhRX9YRSkplpz0N+k6NljUUn5l3EWZIKZvYzhvMphEuNiyyy1viH/ejgt66JWgALwC/gtSUAeQKtSwW/w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/body-parser": "*",
-        "@types/express-serve-static-core": "^4.17.33",
-        "@types/qs": "*",
-        "@types/serve-static": "*"
-      }
-    },
-    "node_modules/@types/express-serve-static-core": {
-      "version": "4.19.6",
-      "resolved": "https://registry.npmmirror.com/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
-      "integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*",
-        "@types/qs": "*",
-        "@types/range-parser": "*",
-        "@types/send": "*"
-      }
-    },
-    "node_modules/@types/http-errors": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmmirror.com/@types/http-errors/-/http-errors-2.0.4.tgz",
-      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/@types/jsonwebtoken": {
       "version": "9.0.9",
       "resolved": "https://registry.npmmirror.com/@types/jsonwebtoken/-/jsonwebtoken-9.0.9.tgz",
@@ -935,13 +958,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/mime": {
-      "version": "1.3.5",
-      "resolved": "https://registry.npmmirror.com/@types/mime/-/mime-1.3.5.tgz",
-      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/@types/ms": {
       "version": "2.1.0",
       "resolved": "https://registry.npmmirror.com/@types/ms/-/ms-2.1.0.tgz",
@@ -959,43 +975,6 @@
         "undici-types": "~6.19.2"
       }
     },
-    "node_modules/@types/qs": {
-      "version": "6.14.0",
-      "resolved": "https://registry.npmmirror.com/@types/qs/-/qs-6.14.0.tgz",
-      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@types/range-parser": {
-      "version": "1.2.7",
-      "resolved": "https://registry.npmmirror.com/@types/range-parser/-/range-parser-1.2.7.tgz",
-      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@types/send": {
-      "version": "0.17.4",
-      "resolved": "https://registry.npmmirror.com/@types/send/-/send-0.17.4.tgz",
-      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/mime": "^1",
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/serve-static": {
-      "version": "1.15.7",
-      "resolved": "https://registry.npmmirror.com/@types/serve-static/-/serve-static-1.15.7.tgz",
-      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/http-errors": "*",
-        "@types/node": "*",
-        "@types/send": "*"
-      }
-    },
     "node_modules/@types/strip-bom": {
       "version": "3.0.0",
       "resolved": "https://registry.npmmirror.com/@types/strip-bom/-/strip-bom-3.0.0.tgz",
@@ -1108,17 +1087,29 @@
         "url": "https://opencollective.com/vitest"
       }
     },
-    "node_modules/accepts": {
-      "version": "1.3.8",
-      "resolved": "https://registry.npmmirror.com/accepts/-/accepts-1.3.8.tgz",
-      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
+    "node_modules/@web3-storage/multipart-parser": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmmirror.com/@web3-storage/multipart-parser/-/multipart-parser-1.0.0.tgz",
+      "integrity": "sha512-BEO6al7BYqcnfX15W2cnGR+Q566ACXAT9UQykORCWW80lmkpWsnEob6zJS1ZVBKsSJC8+7vJkHwlp+lXG1UCdw==",
+      "license": "(Apache-2.0 AND MIT)"
+    },
+    "node_modules/@zxing/text-encoding": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmmirror.com/@zxing/text-encoding/-/text-encoding-0.9.0.tgz",
+      "integrity": "sha512-U/4aVJ2mxI0aDNI8Uq0wEhMgY+u4CNtEb0om3+y3+niDAsoTCOB33UF0sxpzqzdqXLqmvc+vZyAt4O8pPdfkwA==",
+      "license": "(Unlicense OR Apache-2.0)",
+      "optional": true
+    },
+    "node_modules/abort-controller": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmmirror.com/abort-controller/-/abort-controller-3.0.0.tgz",
+      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
       "license": "MIT",
       "dependencies": {
-        "mime-types": "~2.1.34",
-        "negotiator": "0.6.3"
+        "event-target-shim": "^5.0.0"
       },
       "engines": {
-        "node": ">= 0.6"
+        "node": ">=6.5"
       }
     },
     "node_modules/acorn": {
@@ -1279,12 +1270,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/array-flatten": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmmirror.com/array-flatten/-/array-flatten-1.1.1.tgz",
-      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
-      "license": "MIT"
-    },
     "node_modules/asap": {
       "version": "2.0.6",
       "resolved": "https://registry.npmmirror.com/asap/-/asap-2.0.6.tgz",
@@ -1308,6 +1293,21 @@
       "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
       "license": "MIT"
     },
+    "node_modules/available-typed-arrays": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmmirror.com/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
+      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
+      "license": "MIT",
+      "dependencies": {
+        "possible-typed-array-names": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/axios": {
       "version": "1.9.0",
       "resolved": "https://registry.npmmirror.com/axios/-/axios-1.9.0.tgz",
@@ -1339,30 +1339,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/body-parser": {
-      "version": "1.20.3",
-      "resolved": "https://registry.npmmirror.com/body-parser/-/body-parser-1.20.3.tgz",
-      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
-      "license": "MIT",
-      "dependencies": {
-        "bytes": "3.1.2",
-        "content-type": "~1.0.5",
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "destroy": "1.2.0",
-        "http-errors": "2.0.0",
-        "iconv-lite": "0.4.24",
-        "on-finished": "2.4.1",
-        "qs": "6.13.0",
-        "raw-body": "2.5.2",
-        "type-is": "~1.6.18",
-        "unpipe": "1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8",
-        "npm": "1.2.8000 || >= 1.4.16"
-      }
-    },
     "node_modules/bowser": {
       "version": "1.9.4",
       "resolved": "https://registry.npmmirror.com/bowser/-/bowser-1.9.4.tgz",
@@ -1412,15 +1388,6 @@
       "integrity": "sha512-HpGFw18DgFWlncDfjTa2rcQ4W88O1mC8e8yZ2AvQY5KDaktSTwo+KRf6nHK6FRI5FyRyb/5T6+TSxfP7QyGsmQ==",
       "license": "MIT"
     },
-    "node_modules/bytes": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmmirror.com/bytes/-/bytes-3.1.2.tgz",
-      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/cac": {
       "version": "6.7.14",
       "resolved": "https://registry.npmmirror.com/cac/-/cac-6.7.14.tgz",
@@ -1431,6 +1398,24 @@
         "node": ">=8"
       }
     },
+    "node_modules/call-bind": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmmirror.com/call-bind/-/call-bind-1.0.8.tgz",
+      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.0",
+        "es-define-property": "^1.0.0",
+        "get-intrinsic": "^1.2.4",
+        "set-function-length": "^1.2.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/call-bind-apply-helpers": {
       "version": "1.0.2",
       "resolved": "https://registry.npmmirror.com/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
@@ -1557,18 +1542,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/content-disposition": {
-      "version": "0.5.4",
-      "resolved": "https://registry.npmmirror.com/content-disposition/-/content-disposition-0.5.4.tgz",
-      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "5.2.1"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/content-type": {
       "version": "1.0.5",
       "resolved": "https://registry.npmmirror.com/content-type/-/content-type-1.0.5.tgz",
@@ -1578,21 +1551,6 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/cookie": {
-      "version": "0.7.1",
-      "resolved": "https://registry.npmmirror.com/cookie/-/cookie-0.7.1.tgz",
-      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/cookie-signature": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmmirror.com/cookie-signature/-/cookie-signature-1.0.6.tgz",
-      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
-      "license": "MIT"
-    },
     "node_modules/cookiejar": {
       "version": "2.1.4",
       "resolved": "https://registry.npmmirror.com/cookiejar/-/cookiejar-2.1.4.tgz",
@@ -1634,6 +1592,15 @@
         "node": ">= 8"
       }
     },
+    "node_modules/data-uri-to-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmmirror.com/data-uri-to-buffer/-/data-uri-to-buffer-3.0.1.tgz",
+      "integrity": "sha512-WboRycPNsVw3B3TL559F7kuBUM4d8CgMEvk6xEJlOp7OBPjt6G7z8WMWlD2rOFZLk6OYfFIUGsCOWzcQH9K2og==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/dateformat": {
       "version": "2.2.0",
       "resolved": "https://registry.npmmirror.com/dateformat/-/dateformat-2.2.0.tgz",
@@ -1643,15 +1610,6 @@
         "node": "*"
       }
     },
-    "node_modules/debug": {
-      "version": "2.6.9",
-      "resolved": "https://registry.npmmirror.com/debug/-/debug-2.6.9.tgz",
-      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "2.0.0"
-      }
-    },
     "node_modules/deep-eql": {
       "version": "4.1.4",
       "resolved": "https://registry.npmmirror.com/deep-eql/-/deep-eql-4.1.4.tgz",
@@ -1677,6 +1635,23 @@
         "node": ">= 0.10.0"
       }
     },
+    "node_modules/define-data-property": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmmirror.com/define-data-property/-/define-data-property-1.1.4.tgz",
+      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/delayed-stream": {
       "version": "1.0.0",
       "resolved": "https://registry.npmmirror.com/delayed-stream/-/delayed-stream-1.0.0.tgz",
@@ -1686,15 +1661,6 @@
         "node": ">=0.4.0"
       }
     },
-    "node_modules/depd": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmmirror.com/depd/-/depd-2.0.0.tgz",
-      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/destroy": {
       "version": "1.2.0",
       "resolved": "https://registry.npmmirror.com/destroy/-/destroy-1.2.0.tgz",
@@ -1822,15 +1788,6 @@
       "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
       "license": "MIT"
     },
-    "node_modules/encodeurl": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmmirror.com/encodeurl/-/encodeurl-2.0.0.tgz",
-      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/end-of-stream": {
       "version": "1.4.4",
       "resolved": "https://registry.npmmirror.com/end-of-stream/-/end-of-stream-1.4.4.tgz",
@@ -1951,13 +1908,13 @@
         "@types/estree": "^1.0.0"
       }
     },
-    "node_modules/etag": {
-      "version": "1.8.1",
-      "resolved": "https://registry.npmmirror.com/etag/-/etag-1.8.1.tgz",
-      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
+    "node_modules/event-target-shim": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmmirror.com/event-target-shim/-/event-target-shim-5.0.1.tgz",
+      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
       "license": "MIT",
       "engines": {
-        "node": ">= 0.6"
+        "node": ">=6"
       }
     },
     "node_modules/execa": {
@@ -1984,52 +1941,6 @@
         "url": "https://github.com/sindresorhus/execa?sponsor=1"
       }
     },
-    "node_modules/express": {
-      "version": "4.21.2",
-      "resolved": "https://registry.npmmirror.com/express/-/express-4.21.2.tgz",
-      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
-      "license": "MIT",
-      "dependencies": {
-        "accepts": "~1.3.8",
-        "array-flatten": "1.1.1",
-        "body-parser": "1.20.3",
-        "content-disposition": "0.5.4",
-        "content-type": "~1.0.4",
-        "cookie": "0.7.1",
-        "cookie-signature": "1.0.6",
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
-        "finalhandler": "1.3.1",
-        "fresh": "0.5.2",
-        "http-errors": "2.0.0",
-        "merge-descriptors": "1.0.3",
-        "methods": "~1.1.2",
-        "on-finished": "2.4.1",
-        "parseurl": "~1.3.3",
-        "path-to-regexp": "0.1.12",
-        "proxy-addr": "~2.0.7",
-        "qs": "6.13.0",
-        "range-parser": "~1.2.1",
-        "safe-buffer": "5.2.1",
-        "send": "0.19.0",
-        "serve-static": "1.16.2",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "type-is": "~1.6.18",
-        "utils-merge": "1.0.1",
-        "vary": "~1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.10.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/express"
-      }
-    },
     "node_modules/extend-shallow": {
       "version": "2.0.1",
       "resolved": "https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz",
@@ -2062,24 +1973,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/finalhandler": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmmirror.com/finalhandler/-/finalhandler-1.3.1.tgz",
-      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "2.6.9",
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "on-finished": "2.4.1",
-        "parseurl": "~1.3.3",
-        "statuses": "2.0.1",
-        "unpipe": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/find-up": {
       "version": "7.0.0",
       "resolved": "https://registry.npmmirror.com/find-up/-/find-up-7.0.0.tgz",
@@ -2117,6 +2010,21 @@
         }
       }
     },
+    "node_modules/for-each": {
+      "version": "0.3.5",
+      "resolved": "https://registry.npmmirror.com/for-each/-/for-each-0.3.5.tgz",
+      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/form-data": {
       "version": "4.0.2",
       "resolved": "https://registry.npmmirror.com/form-data/-/form-data-4.0.2.tgz",
@@ -2174,24 +2082,6 @@
         "node": ">=4.0.0"
       }
     },
-    "node_modules/forwarded": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmmirror.com/forwarded/-/forwarded-0.2.0.tgz",
-      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/fresh": {
-      "version": "0.5.2",
-      "resolved": "https://registry.npmmirror.com/fresh/-/fresh-0.5.2.tgz",
-      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/fs.realpath": {
       "version": "1.0.0",
       "resolved": "https://registry.npmmirror.com/fs.realpath/-/fs.realpath-1.0.0.tgz",
@@ -2349,6 +2239,18 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/has-property-descriptors": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmmirror.com/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
+      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/has-symbols": {
       "version": "1.1.0",
       "resolved": "https://registry.npmmirror.com/has-symbols/-/has-symbols-1.1.0.tgz",
@@ -2388,20 +2290,13 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/http-errors": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmmirror.com/http-errors/-/http-errors-2.0.0.tgz",
-      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+    "node_modules/hono": {
+      "version": "4.7.11",
+      "resolved": "https://registry.npmmirror.com/hono/-/hono-4.7.11.tgz",
+      "integrity": "sha512-rv0JMwC0KALbbmwJDEnxvQCeJh+xbS3KEWW5PC9cMJ08Ur9xgatI0HmtgYZfOdOSOeYsp5LO2cOhdI8cLEbDEQ==",
       "license": "MIT",
-      "dependencies": {
-        "depd": "2.0.0",
-        "inherits": "2.0.4",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "toidentifier": "1.0.1"
-      },
       "engines": {
-        "node": ">= 0.8"
+        "node": ">=16.9.0"
       }
     },
     "node_modules/human-signals": {
@@ -2423,18 +2318,6 @@
         "ms": "^2.0.0"
       }
     },
-    "node_modules/iconv-lite": {
-      "version": "0.4.24",
-      "resolved": "https://registry.npmmirror.com/iconv-lite/-/iconv-lite-0.4.24.tgz",
-      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
-      "license": "MIT",
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/inflight": {
       "version": "1.0.6",
       "resolved": "https://registry.npmmirror.com/inflight/-/inflight-1.0.6.tgz",
@@ -2453,13 +2336,20 @@
       "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
       "license": "ISC"
     },
-    "node_modules/ipaddr.js": {
-      "version": "1.9.1",
-      "resolved": "https://registry.npmmirror.com/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
-      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+    "node_modules/is-arguments": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmmirror.com/is-arguments/-/is-arguments-1.2.0.tgz",
+      "integrity": "sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==",
       "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-tostringtag": "^1.0.2"
+      },
       "engines": {
-        "node": ">= 0.10"
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/is-binary-path": {
@@ -2475,6 +2365,18 @@
         "node": ">=8"
       }
     },
+    "node_modules/is-callable": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmmirror.com/is-callable/-/is-callable-1.2.7.tgz",
+      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/is-class-hotfix": {
       "version": "0.0.6",
       "resolved": "https://registry.npmmirror.com/is-class-hotfix/-/is-class-hotfix-0.0.6.tgz",
@@ -2516,6 +2418,24 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/is-generator-function": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmmirror.com/is-generator-function/-/is-generator-function-1.1.0.tgz",
+      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-proto": "^1.0.0",
+        "has-tostringtag": "^1.0.2",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/is-glob": {
       "version": "4.0.3",
       "resolved": "https://registry.npmmirror.com/is-glob/-/is-glob-4.0.3.tgz",
@@ -2539,6 +2459,24 @@
         "node": ">=0.12.0"
       }
     },
+    "node_modules/is-regex": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmmirror.com/is-regex/-/is-regex-1.2.1.tgz",
+      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/is-stream": {
       "version": "3.0.0",
       "resolved": "https://registry.npmmirror.com/is-stream/-/is-stream-3.0.0.tgz",
@@ -2563,6 +2501,21 @@
         "isstream": "~0.1.2"
       }
     },
+    "node_modules/is-typed-array": {
+      "version": "1.1.15",
+      "resolved": "https://registry.npmmirror.com/is-typed-array/-/is-typed-array-1.1.15.tgz",
+      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
+      "license": "MIT",
+      "dependencies": {
+        "which-typed-array": "^1.1.16"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/isarray": {
       "version": "1.0.0",
       "resolved": "https://registry.npmmirror.com/isarray/-/isarray-1.0.0.tgz",
@@ -2766,15 +2719,6 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/media-typer": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmmirror.com/media-typer/-/media-typer-0.3.0.tgz",
-      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/merge-descriptors": {
       "version": "1.0.3",
       "resolved": "https://registry.npmmirror.com/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
@@ -2795,23 +2739,12 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmmirror.com/methods/-/methods-1.1.2.tgz",
       "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 0.6"
       }
     },
-    "node_modules/mime": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmmirror.com/mime/-/mime-1.6.0.tgz",
-      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
-      "license": "MIT",
-      "bin": {
-        "mime": "cli.js"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/mime-db": {
       "version": "1.52.0",
       "resolved": "https://registry.npmmirror.com/mime-db/-/mime-db-1.52.0.tgz",
@@ -2901,6 +2834,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/mrmime": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmmirror.com/mrmime/-/mrmime-1.0.1.tgz",
+      "integrity": "sha512-hzzEagAgDyoU1Q6yg5uI+AorQgdvMCur3FcKf7NhMKWsaYg+RnbTyHRa/9IlLF9rf455MOCtcqqrQQ83pPP7Uw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/ms": {
       "version": "2.0.0",
       "resolved": "https://registry.npmmirror.com/ms/-/ms-2.0.0.tgz",
@@ -2937,15 +2879,6 @@
         "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
       }
     },
-    "node_modules/negotiator": {
-      "version": "0.6.3",
-      "resolved": "https://registry.npmmirror.com/negotiator/-/negotiator-0.6.3.tgz",
-      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/node-hex": {
       "version": "1.0.1",
       "resolved": "https://registry.npmmirror.com/node-hex/-/node-hex-1.0.1.tgz",
@@ -3015,18 +2948,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/on-finished": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmmirror.com/on-finished/-/on-finished-2.4.1.tgz",
-      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
-      "license": "MIT",
-      "dependencies": {
-        "ee-first": "1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/once": {
       "version": "1.4.0",
       "resolved": "https://registry.npmmirror.com/once/-/once-1.4.0.tgz",
@@ -3129,15 +3050,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/parseurl": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmmirror.com/parseurl/-/parseurl-1.3.3.tgz",
-      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/path-exists": {
       "version": "5.0.0",
       "resolved": "https://registry.npmmirror.com/path-exists/-/path-exists-5.0.0.tgz",
@@ -3174,12 +3086,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/path-to-regexp": {
-      "version": "0.1.12",
-      "resolved": "https://registry.npmmirror.com/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
-      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
-      "license": "MIT"
-    },
     "node_modules/pathe": {
       "version": "1.1.2",
       "resolved": "https://registry.npmmirror.com/pathe/-/pathe-1.1.2.tgz",
@@ -3254,6 +3160,15 @@
       "integrity": "sha512-fnWVljUchTro6RiCFvCXBbNhJc2NijN7oIQxbwsyL0buWJPG85v81ehlHI9fXrJsMNgTofEoWIQeClKpgxFLrg==",
       "license": "MIT"
     },
+    "node_modules/possible-typed-array-names": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmmirror.com/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
+      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
     "node_modules/postcss": {
       "version": "8.5.4",
       "resolved": "https://registry.npmmirror.com/postcss/-/postcss-8.5.4.tgz",
@@ -3320,19 +3235,6 @@
       "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
       "license": "MIT"
     },
-    "node_modules/proxy-addr": {
-      "version": "2.0.7",
-      "resolved": "https://registry.npmmirror.com/proxy-addr/-/proxy-addr-2.0.7.tgz",
-      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
-      "license": "MIT",
-      "dependencies": {
-        "forwarded": "0.2.0",
-        "ipaddr.js": "1.9.1"
-      },
-      "engines": {
-        "node": ">= 0.10"
-      }
-    },
     "node_modules/proxy-from-env": {
       "version": "1.1.0",
       "resolved": "https://registry.npmmirror.com/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
@@ -3374,30 +3276,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/range-parser": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmmirror.com/range-parser/-/range-parser-1.2.1.tgz",
-      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/raw-body": {
-      "version": "2.5.2",
-      "resolved": "https://registry.npmmirror.com/raw-body/-/raw-body-2.5.2.tgz",
-      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
-      "license": "MIT",
-      "dependencies": {
-        "bytes": "3.1.2",
-        "http-errors": "2.0.0",
-        "iconv-lite": "0.4.24",
-        "unpipe": "1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/react-is": {
       "version": "18.3.1",
       "resolved": "https://registry.npmmirror.com/react-is/-/react-is-18.3.1.tgz",
@@ -3544,6 +3422,23 @@
       ],
       "license": "MIT"
     },
+    "node_modules/safe-regex-test": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmmirror.com/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
+      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-regex": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/safer-buffer": {
       "version": "2.1.2",
       "resolved": "https://registry.npmmirror.com/safer-buffer/-/safer-buffer-2.1.2.tgz",
@@ -3577,66 +3472,23 @@
         "node": ">=10"
       }
     },
-    "node_modules/send": {
-      "version": "0.19.0",
-      "resolved": "https://registry.npmmirror.com/send/-/send-0.19.0.tgz",
-      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "destroy": "1.2.0",
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
-        "fresh": "0.5.2",
-        "http-errors": "2.0.0",
-        "mime": "1.6.0",
-        "ms": "2.1.3",
-        "on-finished": "2.4.1",
-        "range-parser": "~1.2.1",
-        "statuses": "2.0.1"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/send/node_modules/encodeurl": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.2.tgz",
-      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/send/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmmirror.com/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/serve-static": {
-      "version": "1.16.2",
-      "resolved": "https://registry.npmmirror.com/serve-static/-/serve-static-1.16.2.tgz",
-      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+    "node_modules/set-function-length": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmmirror.com/set-function-length/-/set-function-length-1.2.2.tgz",
+      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
       "license": "MIT",
       "dependencies": {
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "parseurl": "~1.3.3",
-        "send": "0.19.0"
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.4",
+        "gopd": "^1.0.1",
+        "has-property-descriptors": "^1.0.2"
       },
       "engines": {
-        "node": ">= 0.8.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/setprototypeof": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmmirror.com/setprototypeof/-/setprototypeof-1.2.0.tgz",
-      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
-      "license": "ISC"
-    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmmirror.com/shebang-command/-/shebang-command-2.0.0.tgz",
@@ -3790,15 +3642,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/statuses": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmmirror.com/statuses/-/statuses-2.0.1.tgz",
-      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/std-env": {
       "version": "3.9.0",
       "resolved": "https://registry.npmmirror.com/std-env/-/std-env-3.9.0.tgz",
@@ -4048,15 +3891,6 @@
         "node": ">=8.0"
       }
     },
-    "node_modules/toidentifier": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmmirror.com/toidentifier/-/toidentifier-1.0.1.tgz",
-      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.6"
-      }
-    },
     "node_modules/tree-kill": {
       "version": "1.2.2",
       "resolved": "https://registry.npmmirror.com/tree-kill/-/tree-kill-1.2.2.tgz",
@@ -4189,19 +4023,6 @@
         "node": ">=4"
       }
     },
-    "node_modules/type-is": {
-      "version": "1.6.18",
-      "resolved": "https://registry.npmmirror.com/type-is/-/type-is-1.6.18.tgz",
-      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
-      "license": "MIT",
-      "dependencies": {
-        "media-typer": "0.3.0",
-        "mime-types": "~2.1.24"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
     "node_modules/typescript": {
       "version": "5.8.3",
       "resolved": "https://registry.npmmirror.com/typescript/-/typescript-5.8.3.tgz",
@@ -4254,15 +4075,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/unpipe": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmmirror.com/unpipe/-/unpipe-1.0.0.tgz",
-      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/urllib": {
       "version": "2.44.0",
       "resolved": "https://registry.npmmirror.com/urllib/-/urllib-2.44.0.tgz",
@@ -4315,6 +4127,19 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/util": {
+      "version": "0.12.5",
+      "resolved": "https://registry.npmmirror.com/util/-/util-0.12.5.tgz",
+      "integrity": "sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==",
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.3",
+        "is-arguments": "^1.0.4",
+        "is-generator-function": "^1.0.7",
+        "is-typed-array": "^1.1.3",
+        "which-typed-array": "^1.1.2"
+      }
+    },
     "node_modules/util-deprecate": {
       "version": "1.0.2",
       "resolved": "https://registry.npmmirror.com/util-deprecate/-/util-deprecate-1.0.2.tgz",
@@ -4349,15 +4174,6 @@
         "mkdirp": "bin/cmd.js"
       }
     },
-    "node_modules/utils-merge": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmmirror.com/utils-merge/-/utils-merge-1.0.1.tgz",
-      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4.0"
-      }
-    },
     "node_modules/v8-compile-cache-lib": {
       "version": "3.0.1",
       "resolved": "https://registry.npmmirror.com/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
@@ -4365,15 +4181,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/vary": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmmirror.com/vary/-/vary-1.1.2.tgz",
-      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
     "node_modules/vite": {
       "version": "5.4.19",
       "resolved": "https://registry.npmmirror.com/vite/-/vite-5.4.19.tgz",
@@ -5003,6 +4810,27 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/web-encoding": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmmirror.com/web-encoding/-/web-encoding-1.1.5.tgz",
+      "integrity": "sha512-HYLeVCdJ0+lBYV2FvNZmv3HJ2Nt0QYXqZojk3d9FJOLkwnuhzM9tmamh8d7HPM8QqjKH8DeHkFTx+CFlWpZZDA==",
+      "license": "MIT",
+      "dependencies": {
+        "util": "^0.12.3"
+      },
+      "optionalDependencies": {
+        "@zxing/text-encoding": "0.9.0"
+      }
+    },
+    "node_modules/web-streams-polyfill": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmmirror.com/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
+      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
     "node_modules/which": {
       "version": "2.0.2",
       "resolved": "https://registry.npmmirror.com/which/-/which-2.0.2.tgz",
@@ -5019,6 +4847,27 @@
         "node": ">= 8"
       }
     },
+    "node_modules/which-typed-array": {
+      "version": "1.1.19",
+      "resolved": "https://registry.npmmirror.com/which-typed-array/-/which-typed-array-1.1.19.tgz",
+      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "for-each": "^0.3.5",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
     "node_modules/why-is-node-running": {
       "version": "2.3.0",
       "resolved": "https://registry.npmmirror.com/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
@@ -5129,12 +4978,14 @@
       "version": "1.0.0",
       "license": "ISC",
       "dependencies": {
+        "@hono/node-server": "^0.2.1",
+        "@hono/zod-validator": "^0.2.2",
         "@prisma/client": "^5.12.1",
         "ali-oss": "^6.23.0",
         "axios": "^1.9.0",
         "dotenv": "^16.5.0",
-        "express": "^4.19.2",
         "find-up": "^7.0.0",
+        "hono": "^4.5.1",
         "jsonwebtoken": "^9.0.2",
         "qcloud-cos-sts": "^3.1.3",
         "zod": "^3.22.4"
@@ -5142,7 +4993,6 @@
       "devDependencies": {
         "@types/ali-oss": "^6.16.11",
         "@types/bcrypt": "^5.0.2",
-        "@types/express": "^4.17.21",
         "@types/jsonwebtoken": "^9.0.9",
         "@types/node": "^20.12.7",
         "@types/supertest": "^6.0.3",
diff --git a/packages/car-management-api/package.json b/packages/car-management-api/package.json
index 92dd291..fdc10b5 100644
--- a/packages/car-management-api/package.json
+++ b/packages/car-management-api/package.json
@@ -18,12 +18,14 @@
   "license": "ISC",
   "type": "module",
   "dependencies": {
+    "@hono/node-server": "^0.2.1",
+    "@hono/zod-validator": "^0.2.2",
     "@prisma/client": "^5.12.1",
     "ali-oss": "^6.23.0",
     "axios": "^1.9.0",
     "dotenv": "^16.5.0",
-    "express": "^4.19.2",
     "find-up": "^7.0.0",
+    "hono": "^4.5.1",
     "jsonwebtoken": "^9.0.2",
     "qcloud-cos-sts": "^3.1.3",
     "zod": "^3.22.4"
@@ -31,7 +33,6 @@
   "devDependencies": {
     "@types/ali-oss": "^6.16.11",
     "@types/bcrypt": "^5.0.2",
-    "@types/express": "^4.17.21",
     "@types/jsonwebtoken": "^9.0.9",
     "@types/node": "^20.12.7",
     "@types/supertest": "^6.0.3",
diff --git a/packages/car-management-api/src/api/admin/features/admin-users/controller.ts b/packages/car-management-api/src/api/admin/features/admin-users/controller.ts
new file mode 100644
index 0000000..93a9a08
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/admin-users/controller.ts
@@ -0,0 +1,110 @@
+import * as adminUserService from "@/modules/users/admin-user.service";
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import type { AdminAuthEnv } from "../../middleware/auth";
+import type { CreateAdminUserInput, UpdateAdminUserInput } from "./schema";
+
+type LoggedInUser = AdminAuthEnv["Variables"]["adminUser"];
+
+const hasAdminManipulationPermission = (user: LoggedInUser, targetUser: Partial<LoggedInUser>): boolean => {
+  switch (user.role) {
+    case "super_admin":
+      return true;
+    case "admin":
+      return targetUser.role !== "super_admin";
+    case "tenant_admin":
+      return targetUser.role !== "super_admin" && targetUser.role !== "admin" && targetUser.tenantId === user.tenantId;
+    case "tenant_viewer":
+      return false;
+    default:
+      return false;
+  }
+};
+
+export const getAllAdminUsers = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  try {
+    const users = (await adminUserService.getAllAdminUsers()).filter((user) =>
+      hasAdminManipulationPermission(adminUser, user),
+    );
+    return c.json(users);
+  } catch (error) {
+    throw new HTTPException(500, { message: "Error fetching admin users" });
+  }
+};
+
+export const getAdminUserById = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  const { id } = c.req.param();
+  try {
+    const user = await adminUserService.getAdminUserById(id);
+    if (!user) {
+      throw new HTTPException(404, { message: "Admin user not found" });
+    }
+    if (!hasAdminManipulationPermission(adminUser, user)) {
+      throw new HTTPException(403, { message: "Forbidden" });
+    }
+    return c.json(user);
+  } catch (error) {
+    if (error instanceof HTTPException) throw error;
+    throw new HTTPException(500, { message: "Error fetching admin user" });
+  }
+};
+
+export const createAdminUser = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  const body = c.get("validatedData") as CreateAdminUserInput;
+
+  if (!hasAdminManipulationPermission(adminUser, body)) {
+    throw new HTTPException(403, { message: "Forbidden" });
+  }
+  try {
+    const newUser = await adminUserService.createAdminUser(body);
+    return c.json(newUser, 201);
+  } catch (error) {
+    throw new HTTPException(500, { message: "Error creating admin user" });
+  }
+};
+
+export const updateAdminUser = async (c: Context<AdminAuthEnv>) => {
+  const { id } = c.req.param();
+  const adminUser = c.get("adminUser");
+  const body = c.get("validatedData") as UpdateAdminUserInput;
+
+  const targetUser = await adminUserService.getAdminUserById(id);
+  if (!targetUser) {
+    throw new HTTPException(404, { message: "Admin user not found" });
+  }
+
+  if (!hasAdminManipulationPermission(adminUser, targetUser) || !hasAdminManipulationPermission(adminUser, body)) {
+    throw new HTTPException(403, { message: "Forbidden" });
+  }
+
+  try {
+    const updatedUser = await adminUserService.updateAdminUser(id, body);
+    return c.json(updatedUser);
+  } catch (error) {
+    throw new HTTPException(500, { message: "Error updating admin user" });
+  }
+};
+
+export const deleteAdminUser = async (c: Context<AdminAuthEnv>) => {
+  const { id } = c.req.param();
+  const adminUser = c.get("adminUser");
+
+  const targetUser = await adminUserService.getAdminUserById(id);
+  if (!targetUser) {
+    throw new HTTPException(404, { message: "Admin user not found" });
+  }
+
+  if (!hasAdminManipulationPermission(adminUser, targetUser)) {
+    throw new HTTPException(403, { message: "Forbidden" });
+  }
+
+  try {
+    await adminUserService.deleteAdminUser(id);
+    return c.body(null, 204);
+  } catch (error) {
+    throw new HTTPException(500, { message: "Error deleting admin user" });
+  }
+};
diff --git a/packages/car-management-api/src/api/admin/features/admin-users/routes.ts b/packages/car-management-api/src/api/admin/features/admin-users/routes.ts
new file mode 100644
index 0000000..fed66aa
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/admin-users/routes.ts
@@ -0,0 +1,15 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import { createAdminUser, deleteAdminUser, getAdminUserById, getAllAdminUsers, updateAdminUser } from "./controller";
+import { createAdminUserSchema, updateAdminUserSchema } from "./schema";
+
+const adminUsersRoutes = new Hono();
+
+adminUsersRoutes.get("/", getAllAdminUsers);
+adminUsersRoutes.post("/", zValidator("json", createAdminUserSchema), createAdminUser);
+
+adminUsersRoutes.get("/:id", getAdminUserById);
+adminUsersRoutes.put("/:id", zValidator("json", updateAdminUserSchema), updateAdminUser);
+adminUsersRoutes.delete("/:id", deleteAdminUser);
+
+export default adminUsersRoutes;
diff --git a/packages/car-management-api/src/api/admin/features/admin-users/schema.ts b/packages/car-management-api/src/api/admin/features/admin-users/schema.ts
new file mode 100644
index 0000000..b4d5734
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/admin-users/schema.ts
@@ -0,0 +1,33 @@
+import { z } from "zod";
+
+export const adminRoleSchema = z.enum(["super_admin", "admin", "tenant_admin", "tenant_viewer"]);
+
+export const adminUserSchema = z.object({
+  id: z.string(),
+  name: z.string(),
+  username: z.string(),
+  role: adminRoleSchema,
+  tenantId: z.string().nullable(),
+  createdAt: z.date(),
+  updatedAt: z.date(),
+});
+
+export const createAdminUserSchema = z.object({
+  name: z.string(),
+  username: z.string(),
+  password: z.string().min(6),
+  role: adminRoleSchema,
+  tenantId: z.string().optional(),
+});
+
+export const updateAdminUserSchema = z.object({
+  name: z.string().optional(),
+  username: z.string().optional(),
+  password: z.string().min(6).optional(),
+  role: adminRoleSchema.optional(),
+  tenantId: z.string().optional(),
+});
+
+export type AdminUser = z.infer<typeof adminUserSchema>;
+export type CreateAdminUserInput = z.infer<typeof createAdminUserSchema>;
+export type UpdateAdminUserInput = z.infer<typeof updateAdminUserSchema>;
diff --git a/packages/car-management-api/src/api/admin/features/auth/controller.ts b/packages/car-management-api/src/api/admin/features/auth/controller.ts
new file mode 100644
index 0000000..2ac7d24
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/auth/controller.ts
@@ -0,0 +1,16 @@
+import * as authService from "@/modules/auth/auth.service";
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import type { LoginInput } from "./schema";
+
+export const login = async (c: Context) => {
+  const { username, password } = c.get("validatedData") as LoginInput;
+
+  const result = await authService.login(username, password);
+
+  if (!result) {
+    throw new HTTPException(401, { message: "Invalid credentials" });
+  }
+
+  return c.json(result);
+};
diff --git a/packages/car-management-api/src/api/admin/features/auth/routes.ts b/packages/car-management-api/src/api/admin/features/auth/routes.ts
new file mode 100644
index 0000000..8fc5154
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/auth/routes.ts
@@ -0,0 +1,10 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import { login } from "./controller";
+import { loginSchema } from "./schema";
+
+const authRoutes = new Hono();
+
+authRoutes.post("/login", zValidator("json", loginSchema), login);
+
+export default authRoutes;
diff --git a/packages/car-management-api/src/api/admin/features/auth/schema.ts b/packages/car-management-api/src/api/admin/features/auth/schema.ts
new file mode 100644
index 0000000..41ad457
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/auth/schema.ts
@@ -0,0 +1,8 @@
+import { z } from "zod";
+
+export const loginSchema = z.object({
+  username: z.string(),
+  password: z.string(),
+});
+
+export type LoginInput = z.infer<typeof loginSchema>;
diff --git a/packages/car-management-api/src/api/admin/features/cars/controller.ts b/packages/car-management-api/src/api/admin/features/cars/controller.ts
new file mode 100644
index 0000000..074d263
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/cars/controller.ts
@@ -0,0 +1,232 @@
+import * as carsService from "@/modules/cars/cars.service";
+import type { Context } from "hono";
+import type {
+  createCarCategorySchema,
+  createCarTrimSchema,
+  createVehicleScenarioSchema,
+  updateCarCategorySchema,
+  updateCarTrimSchema,
+  updateVehicleScenarioSchema,
+} from "./schema";
+
+// Controllers for car-related admin APIs will be defined here.
+// These controllers will use services from the 'modules/cars' directory.
+
+export const createVehicleScenario = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const validatedData = c.get("validatedData") as typeof createVehicleScenarioSchema._type;
+
+  try {
+    const newScenario = await carsService.createVehicleScenario(tenantId, validatedData);
+    return c.json(newScenario, 201);
+  } catch (error: any) {
+    return c.json({ message: "Error creating vehicle scenario", error: error.message }, 500);
+  }
+};
+
+export const getAllVehicleScenarios = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  try {
+    const scenarios = await carsService.getAllVehicleScenarios(tenantId);
+    return c.json(scenarios);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching vehicle scenarios", error: error.message }, 500);
+  }
+};
+
+export const getVehicleScenarioById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const scenario = await carsService.getVehicleScenarioById(tenantId, id);
+    if (scenario) {
+      return c.json(scenario);
+    }
+    return c.json({ message: "Vehicle scenario not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching vehicle scenario", error: error.message }, 500);
+  }
+};
+
+export const updateVehicleScenario = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  const validatedData = c.get("validatedData") as typeof updateVehicleScenarioSchema._type;
+
+  try {
+    const updatedScenario = await carsService.updateVehicleScenario(tenantId, id, validatedData);
+    if (updatedScenario) {
+      return c.json(updatedScenario);
+    }
+    return c.json({ message: "Vehicle scenario not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error updating vehicle scenario", error: error.message }, 500);
+  }
+};
+
+export const deleteVehicleScenario = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    await carsService.deleteVehicleScenario(tenantId, id);
+    return c.body(null, 204);
+  } catch (error: any) {
+    return c.json({ message: "Error deleting vehicle scenario", error: error.message }, 500);
+  }
+};
+
+export const createCarCategory = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const validatedData = c.get("validatedData") as typeof createCarCategorySchema._type;
+
+  // Ensure JSON fields are not undefined
+  const dataForPrisma = {
+    ...validatedData,
+    tags: validatedData.tags ?? [],
+    highlights: validatedData.highlights ?? [],
+    interiorImages: validatedData.interiorImages ?? [],
+    exteriorImages: validatedData.exteriorImages ?? [],
+    offerPictures: validatedData.offerPictures ?? [],
+  };
+
+  try {
+    const newCategory = await carsService.createCarCategory(tenantId, dataForPrisma);
+    return c.json(newCategory, 201);
+  } catch (error: any) {
+    return c.json({ message: "Error creating car category", error: error.message }, 500);
+  }
+};
+
+export const getAllCarCategories = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  try {
+    const categories = await carsService.getAllCarCategories(tenantId);
+    return c.json(categories);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car categories", error: error.message }, 500);
+  }
+};
+
+export const getCarCategoryById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const category = await carsService.getCarCategoryById(tenantId, id);
+    if (category) {
+      return c.json(category);
+    }
+    return c.json({ message: "Car category not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car category", error: error.message }, 500);
+  }
+};
+
+export const updateCarCategory = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  const validatedData = c.get("validatedData") as typeof updateCarCategorySchema._type;
+
+  const dataForPrisma = { ...validatedData };
+  // Remove undefined json fields to avoid Prisma errors
+  if (dataForPrisma.tags === undefined) delete dataForPrisma.tags;
+  if (dataForPrisma.highlights === undefined) delete dataForPrisma.highlights;
+  if (dataForPrisma.interiorImages === undefined) delete dataForPrisma.interiorImages;
+  if (dataForPrisma.exteriorImages === undefined) delete dataForPrisma.exteriorImages;
+  if (dataForPrisma.offerPictures === undefined) delete dataForPrisma.offerPictures;
+
+  try {
+    const updatedCategory = await carsService.updateCarCategory(tenantId, id, dataForPrisma);
+    if (updatedCategory) {
+      return c.json(updatedCategory);
+    }
+    return c.json({ message: "Car category not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error updating car category", error: error.message }, 500);
+  }
+};
+
+export const deleteCarCategory = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    await carsService.deleteCarCategory(tenantId, id);
+    return c.body(null, 204);
+  } catch (error: any) {
+    return c.json({ message: "Error deleting car category", error: error.message }, 500);
+  }
+};
+
+export const createCarTrim = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const validatedData = c.get("validatedData") as typeof createCarTrimSchema._type;
+
+  const dataForPrisma = {
+    ...validatedData,
+    features: validatedData.features ?? [],
+  };
+
+  try {
+    const newTrim = await carsService.createCarTrim(tenantId, dataForPrisma);
+    return c.json(newTrim, 201);
+  } catch (error: any) {
+    return c.json({ message: "Error creating car trim", error: error.message }, 500);
+  }
+};
+
+export const getAllCarTrims = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { categoryId } = c.req.query();
+  if (!categoryId) {
+    return c.json({ message: "categoryId query parameter is required" }, 400);
+  }
+  try {
+    const trims = await carsService.getAllCarTrims(tenantId, categoryId);
+    return c.json(trims);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car trims", error: error.message }, 500);
+  }
+};
+
+export const getCarTrimById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const trim = await carsService.getCarTrimById(tenantId, id);
+    if (trim) {
+      return c.json(trim);
+    }
+    return c.json({ message: "Car trim not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car trim", error: error.message }, 500);
+  }
+};
+
+export const updateCarTrim = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  const validatedData = c.get("validatedData") as typeof updateCarTrimSchema._type;
+
+  const dataForPrisma = { ...validatedData };
+  if (dataForPrisma.features === undefined) delete dataForPrisma.features;
+
+  try {
+    const updatedTrim = await carsService.updateCarTrim(tenantId, id, dataForPrisma);
+    if (updatedTrim) {
+      return c.json(updatedTrim);
+    }
+    return c.json({ message: "Car trim not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error updating car trim", error: error.message }, 500);
+  }
+};
+
+export const deleteCarTrim = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    await carsService.deleteCarTrim(tenantId, id);
+    return c.body(null, 204);
+  } catch (error: any) {
+    return c.json({ message: "Error deleting car trim", error: error.message }, 500);
+  }
+};
diff --git a/packages/car-management-api/src/api/admin/features/cars/index.ts b/packages/car-management-api/src/api/admin/features/cars/index.ts
new file mode 100644
index 0000000..77c2189
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/cars/index.ts
@@ -0,0 +1,10 @@
+import { Hono } from "hono";
+import vehicleScenariosAdminRoutes from "./routes";
+
+const carsAdminApi = new Hono();
+
+carsAdminApi.route("/", vehicleScenariosAdminRoutes);
+
+// Later, other car-related routes (categories, trims) will be added here.
+
+export default carsAdminApi;
diff --git a/packages/car-management-api/src/api/admin/features/cars/routes.ts b/packages/car-management-api/src/api/admin/features/cars/routes.ts
new file mode 100644
index 0000000..904559e
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/cars/routes.ts
@@ -0,0 +1,52 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import {
+  createCarCategory,
+  createCarTrim,
+  createVehicleScenario,
+  deleteCarCategory,
+  deleteCarTrim,
+  deleteVehicleScenario,
+  getAllCarCategories,
+  getAllCarTrims,
+  getAllVehicleScenarios,
+  getCarCategoryById,
+  getCarTrimById,
+  getVehicleScenarioById,
+  updateCarCategory,
+  updateCarTrim,
+  updateVehicleScenario,
+} from "./controller";
+import {
+  createCarCategorySchema,
+  createCarTrimSchema,
+  createVehicleScenarioSchema,
+  updateCarCategorySchema,
+  updateCarTrimSchema,
+  updateVehicleScenarioSchema,
+} from "./schema";
+
+const carsAdminRoutes = new Hono();
+
+// VehicleScenario Routes
+carsAdminRoutes.post("/vehicle-scenarios", zValidator("json", createVehicleScenarioSchema), createVehicleScenario);
+carsAdminRoutes.get("/vehicle-scenarios", getAllVehicleScenarios);
+carsAdminRoutes.get("/vehicle-scenarios/:id", getVehicleScenarioById);
+carsAdminRoutes.put("/vehicle-scenarios/:id", zValidator("json", updateVehicleScenarioSchema), updateVehicleScenario);
+carsAdminRoutes.delete("/vehicle-scenarios/:id", deleteVehicleScenario);
+
+// CarCategory Routes
+carsAdminRoutes.post("/car-categories", zValidator("json", createCarCategorySchema), createCarCategory);
+carsAdminRoutes.get("/car-categories", getAllCarCategories);
+carsAdminRoutes.get("/car-categories/:id", getCarCategoryById);
+carsAdminRoutes.put("/car-categories/:id", zValidator("json", updateCarCategorySchema), updateCarCategory);
+carsAdminRoutes.delete("/car-categories/:id", deleteCarCategory);
+
+// CarTrim Routes
+carsAdminRoutes.post("/car-categories/:categoryId/trims", zValidator("json", createCarTrimSchema), createCarTrim);
+carsAdminRoutes.get("/car-categories/:categoryId/trims", getAllCarTrims);
+carsAdminRoutes.get("/car-trims/:id", getCarTrimById);
+carsAdminRoutes.put("/car-trims/:id", zValidator("json", updateCarTrimSchema), updateCarTrim);
+carsAdminRoutes.delete("/car-trims/:id", deleteCarTrim);
+
+export default carsAdminRoutes;
diff --git a/packages/car-management-api/src/api/admin/features/cars/schema.ts b/packages/car-management-api/src/api/admin/features/cars/schema.ts
new file mode 100644
index 0000000..3500dcc
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/cars/schema.ts
@@ -0,0 +1,47 @@
+import { z } from "zod";
+
+// Zod schemas for car-related API validation will be defined here.
+
+// Schema for creating a vehicle scenario
+export const createVehicleScenarioSchema = z.object({
+  name: z.string().min(1, { message: "Name is required" }),
+  description: z.string().min(1, { message: "Description is required" }),
+  image: z.string().url({ message: "Image must be a valid URL" }),
+});
+
+// Schema for updating a vehicle scenario
+export const updateVehicleScenarioSchema = z.object({
+  name: z.string().min(1, { message: "Name is required" }).optional(),
+  description: z.string().min(1, { message: "Description is required" }).optional(),
+  image: z.string().url({ message: "Image must be a valid URL" }).optional(),
+});
+
+// Schema for creating a car category
+export const createCarCategorySchema = z.object({
+  name: z.string().min(1, { message: "Name is required" }),
+  image: z.string().url({ message: "Image must be a valid URL" }),
+  badge: z.string().optional(),
+  tags: z.array(z.string()).optional(),
+  highlights: z.array(z.object({ title: z.string(), value: z.string() })).optional(),
+  interiorImages: z.array(z.string().url()).optional(),
+  exteriorImages: z.array(z.string().url()).optional(),
+  offerPictures: z.array(z.string().url()).optional(),
+});
+
+// Schema for updating a car category
+export const updateCarCategorySchema = createCarCategorySchema.partial();
+
+// Schema for creating a car trim
+export const createCarTrimSchema = z.object({
+  name: z.string().min(1),
+  subtitle: z.string().min(1),
+  image: z.string().url(),
+  originalPrice: z.string(),
+  currentPrice: z.string(),
+  badge: z.string().optional(),
+  features: z.array(z.object({ title: z.string(), value: z.string() })).optional(),
+  categoryId: z.string().cuid(),
+});
+
+// Schema for updating a car trim
+export const updateCarTrimSchema = createCarTrimSchema.partial();
diff --git a/packages/car-management-api/src/api/admin/features/img/controller.ts b/packages/car-management-api/src/api/admin/features/img/controller.ts
new file mode 100644
index 0000000..7403fbb
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/img/controller.ts
@@ -0,0 +1,19 @@
+import { createQcloudImgUploadToken } from "@/lib/oss-sts";
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import type { AdminAuthEnv } from "../../middleware/auth";
+
+export const getUploadToken = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  if (!adminUser.tenantId) {
+    throw new HTTPException(403, { message: "Forbidden: No tenant associated" });
+  }
+
+  try {
+    const configWithToken = await createQcloudImgUploadToken(adminUser.tenantId);
+    return c.json(configWithToken);
+  } catch (e) {
+    console.error(e);
+    throw new HTTPException(500, { message: "Failed to get upload token" });
+  }
+};
diff --git a/packages/car-management-api/src/api/admin/features/img/routes.ts b/packages/car-management-api/src/api/admin/features/img/routes.ts
new file mode 100644
index 0000000..d56833f
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/img/routes.ts
@@ -0,0 +1,8 @@
+import { Hono } from "hono";
+import * as controller from "./controller";
+
+const img = new Hono();
+
+img.get("/upload-token", controller.getUploadToken);
+
+export default img;
diff --git a/packages/car-management-api/src/api/admin/features/tenants/controller.ts b/packages/car-management-api/src/api/admin/features/tenants/controller.ts
new file mode 100644
index 0000000..dc4710c
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/tenants/controller.ts
@@ -0,0 +1,41 @@
+import * as tenantService from "@/modules/tenants/tenant.service";
+import type { Context } from "hono";
+import type { createTenantSchema, updateTenantSchema } from "./schema";
+
+export const getAllTenants = async (c: Context) => {
+  // TODO: Add permission check middleware
+  const tenants = await tenantService.getAllTenants();
+  return c.json(tenants);
+};
+
+export const getTenantById = async (c: Context) => {
+  // TODO: Add permission check middleware
+  const { id } = c.req.param();
+  const tenant = await tenantService.getTenantById(id);
+  if (!tenant) {
+    return c.json({ message: "Tenant not found" }, 404);
+  }
+  return c.json(tenant);
+};
+
+export const createTenant = async (c: Context) => {
+  const validatedData = c.get("validatedData") as typeof createTenantSchema._type;
+  const newTenant = await tenantService.createTenant(validatedData);
+  return c.json(newTenant, 201);
+};
+
+export const updateTenant = async (c: Context) => {
+  const { id } = c.req.param();
+  const validatedData = c.get("validatedData") as typeof updateTenantSchema._type;
+  const updatedTenant = await tenantService.updateTenant(id, validatedData);
+  if (!updatedTenant) {
+    return c.json({ message: "Tenant not found" }, 404);
+  }
+  return c.json(updatedTenant);
+};
+
+export const deleteTenant = async (c: Context) => {
+  const { id } = c.req.param();
+  await tenantService.deleteTenant(id);
+  return c.body(null, 204);
+};
diff --git a/packages/car-management-api/src/api/admin/features/tenants/routes.ts b/packages/car-management-api/src/api/admin/features/tenants/routes.ts
new file mode 100644
index 0000000..6aa4635
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/tenants/routes.ts
@@ -0,0 +1,14 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import * as controller from "./controller";
+import { createTenantSchema, updateTenantSchema } from "./schema";
+
+const tenants = new Hono();
+
+tenants.get("/", controller.getAllTenants);
+tenants.post("/", zValidator("json", createTenantSchema), controller.createTenant);
+tenants.get("/:id", controller.getTenantById);
+tenants.put("/:id", zValidator("json", updateTenantSchema), controller.updateTenant);
+tenants.delete("/:id", controller.deleteTenant);
+
+export default tenants;
diff --git a/packages/car-management-api/src/api/admin/features/tenants/schema.ts b/packages/car-management-api/src/api/admin/features/tenants/schema.ts
new file mode 100644
index 0000000..7d44484
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/tenants/schema.ts
@@ -0,0 +1,19 @@
+import { z } from "zod";
+
+export const tenantStatusSchema = z.enum(["active", "inactive"]);
+
+export const createTenantSchema = z.object({
+  name: z.string().min(1, "Name is required"),
+  appId: z.string().min(1, "App ID is required"),
+  appSecret: z.string().min(1, "App Secret is required"),
+  status: tenantStatusSchema.optional(),
+  config: z.record(z.string(), z.any()).optional(),
+});
+
+export const updateTenantSchema = z.object({
+  name: z.string().min(1).optional(),
+  appId: z.string().min(1).optional(),
+  appSecret: z.string().min(1).optional(),
+  status: tenantStatusSchema.optional(),
+  config: z.record(z.string(), z.any()).optional(),
+});
diff --git a/packages/car-management-api/src/api/admin/features/users/controller.ts b/packages/car-management-api/src/api/admin/features/users/controller.ts
new file mode 100644
index 0000000..097675a
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/users/controller.ts
@@ -0,0 +1,43 @@
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import * as userService from "../../../../modules/users/user.service";
+import type { AdminAuthEnv } from "../../middleware/auth";
+
+export const getAllUsers = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  if (!adminUser.tenantId) {
+    throw new HTTPException(403, { message: "Forbidden: No tenant associated" });
+  }
+
+  try {
+    const users = await userService.getAllUsers(adminUser.tenantId);
+    return c.json(users);
+  } catch (error) {
+    throw new HTTPException(500, { message: "Error fetching users" });
+  }
+};
+
+export const getUserById = async (c: Context<AdminAuthEnv>) => {
+  const adminUser = c.get("adminUser");
+  if (!adminUser.tenantId) {
+    throw new HTTPException(403, { message: "Forbidden: No tenant associated" });
+  }
+
+  const { id } = c.req.param();
+
+  try {
+    const user = await userService.getUserById(adminUser.tenantId, id);
+    if (!user) {
+      throw new HTTPException(404, { message: "User not found" });
+    }
+    // A tenant should not be able to see users from another tenant.
+    // The service logic already scopes this by tenantId, but as a safeguard:
+    if (user.tenantId !== adminUser.tenantId) {
+      throw new HTTPException(404, { message: "User not found" });
+    }
+    return c.json(user);
+  } catch (error) {
+    if (error instanceof HTTPException) throw error;
+    throw new HTTPException(500, { message: "Error fetching user" });
+  }
+};
diff --git a/packages/car-management-api/src/api/admin/features/users/routes.ts b/packages/car-management-api/src/api/admin/features/users/routes.ts
new file mode 100644
index 0000000..e2855e7
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/users/routes.ts
@@ -0,0 +1,12 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import * as controller from "./controller";
+import { paramSchema } from "./schema";
+
+const users = new Hono();
+
+users.get("/", controller.getAllUsers);
+
+users.get("/:id", zValidator("param", paramSchema), controller.getUserById);
+
+export default users;
diff --git a/packages/car-management-api/src/api/admin/features/users/schema.ts b/packages/car-management-api/src/api/admin/features/users/schema.ts
new file mode 100644
index 0000000..90aac32
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/features/users/schema.ts
@@ -0,0 +1,5 @@
+import { z } from "zod";
+
+export const paramSchema = z.object({
+  id: z.string().min(1),
+});
diff --git a/packages/car-management-api/src/api/admin/index.ts b/packages/car-management-api/src/api/admin/index.ts
new file mode 100644
index 0000000..9ba800f
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/index.ts
@@ -0,0 +1,32 @@
+import { Hono } from "hono";
+import adminUsersRoutes from "./features/admin-users/routes";
+import authRoutes from "./features/auth/routes";
+import carsAdminApi from "./features/cars";
+import imgAdminApi from "./features/img/routes";
+import tenantsAdminApi from "./features/tenants/routes";
+import usersAdminApi from "./features/users/routes";
+import type { AdminAuthEnv } from "./middleware/auth";
+import { authMiddleware } from "./middleware/auth";
+
+const adminApi = new Hono();
+
+const adminProtected = new Hono<{ Variables: AdminAuthEnv["Variables"] }>();
+
+// All routes under /admin will be protected by the auth middleware
+adminProtected.use("*", authMiddleware);
+
+// Mount feature APIs
+adminProtected.route("/cars", carsAdminApi);
+adminProtected.route("/tenants", tenantsAdminApi);
+adminProtected.route("/admin-users", adminUsersRoutes);
+adminProtected.route("/users", usersAdminApi);
+adminProtected.route("/img", imgAdminApi);
+
+adminProtected.get("/", (c) => c.json({ message: "Welcome to Authenticated Admin API" }));
+
+// Unprotected auth routes
+adminApi.route("/auth", authRoutes);
+// Protected routes
+adminApi.route("/", adminProtected);
+
+export default adminApi;
diff --git a/packages/car-management-api/src/api/admin/middleware/auth.ts b/packages/car-management-api/src/api/admin/middleware/auth.ts
new file mode 100644
index 0000000..a145353
--- /dev/null
+++ b/packages/car-management-api/src/api/admin/middleware/auth.ts
@@ -0,0 +1,40 @@
+import * as authService from "@/modules/auth/auth.service";
+import type { AdminUser } from "@prisma/client";
+import { type Context, type Next } from "hono";
+import { createMiddleware } from "hono/factory";
+import { HTTPException } from "hono/http-exception";
+
+// Define the shape of the JWT payload for admin users
+export interface AdminJwtPayload {
+  id: string;
+}
+
+// Define the shape of the environment for authenticated admin routes
+export type AdminAuthEnv = {
+  Variables: {
+    adminUser: Omit<AdminUser, "passwordHash">;
+    tenantId?: string; // tenantId is optional
+  };
+};
+
+export const authMiddleware = createMiddleware<AdminAuthEnv>(async (c: Context<AdminAuthEnv>, next: Next) => {
+  const authHeader = c.req.header("authorization");
+  const token = authHeader?.split(" ")[1];
+
+  if (!token) {
+    throw new HTTPException(401, { message: "No token provided" });
+  }
+
+  const adminUser = await authService.verifyToken(token);
+
+  if (!adminUser) {
+    throw new HTTPException(401, { message: "Invalid token" });
+  }
+
+  c.set("adminUser", adminUser);
+  if (adminUser.tenantId) {
+    c.set("tenantId", adminUser.tenantId);
+  }
+
+  await next();
+});
diff --git a/packages/car-management-api/src/api/app/features/auth/controller.ts b/packages/car-management-api/src/api/app/features/auth/controller.ts
new file mode 100644
index 0000000..ea6c57c
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/auth/controller.ts
@@ -0,0 +1,18 @@
+import { wechatClient } from "@/lib/wechat";
+import * as appAuthService from "@/modules/auth/app-auth.service";
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import type { AppLoginInput } from "./schema";
+
+export const login = async (c: Context) => {
+  const { code, tenantId } = c.get("validatedData") as AppLoginInput;
+
+  try {
+    const { openid, unionid } = await wechatClient.code2Session(code);
+    const { token, user } = await appAuthService.loginOrRegister(tenantId, openid, unionid);
+    return c.json({ token, user });
+  } catch (error: any) {
+    console.error("Login error:", error);
+    throw new HTTPException(500, { message: "Login failed", cause: error });
+  }
+};
diff --git a/packages/car-management-api/src/api/app/features/auth/routes.ts b/packages/car-management-api/src/api/app/features/auth/routes.ts
new file mode 100644
index 0000000..b66e753
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/auth/routes.ts
@@ -0,0 +1,10 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import { login } from "./controller";
+import { appLoginSchema } from "./schema";
+
+const appAuthRoutes = new Hono();
+
+appAuthRoutes.post("/login", zValidator("json", appLoginSchema), login);
+
+export default appAuthRoutes;
diff --git a/packages/car-management-api/src/api/app/features/auth/schema.ts b/packages/car-management-api/src/api/app/features/auth/schema.ts
new file mode 100644
index 0000000..07b1b24
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/auth/schema.ts
@@ -0,0 +1,8 @@
+import { z } from "zod";
+
+export const appLoginSchema = z.object({
+  code: z.string(),
+  tenantId: z.string(), // tenantId should be passed from the client
+});
+
+export type AppLoginInput = z.infer<typeof appLoginSchema>;
diff --git a/packages/car-management-api/src/api/app/features/cars/controller.ts b/packages/car-management-api/src/api/app/features/cars/controller.ts
new file mode 100644
index 0000000..e7b5e51
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/cars/controller.ts
@@ -0,0 +1,84 @@
+// Controllers for car-related App APIs will be defined here.
+// These controllers will use services from the 'modules/cars' directory.
+
+import * as carsService from "@/modules/cars/cars.service";
+import type { Context } from "hono";
+
+// VehicleScenario Controllers
+export const getAllVehicleScenarios = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  try {
+    const scenarios = await carsService.getAllVehicleScenarios(tenantId);
+    return c.json(scenarios);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching vehicle scenarios", error: error.message }, 500);
+  }
+};
+
+export const getVehicleScenarioById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const scenario = await carsService.getVehicleScenarioById(tenantId, id);
+    if (scenario) {
+      return c.json(scenario);
+    }
+    return c.json({ message: "Vehicle scenario not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching vehicle scenario", error: error.message }, 500);
+  }
+};
+
+// CarCategory Controllers
+export const getAllCarCategories = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  try {
+    const categories = await carsService.getAllCarCategories(tenantId);
+    return c.json(categories);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car categories", error: error.message }, 500);
+  }
+};
+
+export const getCarCategoryById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const category = await carsService.getCarCategoryById(tenantId, id);
+    if (category) {
+      return c.json(category);
+    }
+    return c.json({ message: "Car category not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car category", error: error.message }, 500);
+  }
+};
+
+// CarTrim Controllers
+export const getAllCarTrims = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { categoryId } = c.req.query();
+  if (!categoryId) {
+    return c.json({ message: "categoryId query parameter is required" }, 400);
+  }
+  try {
+    const trims = await carsService.getAllCarTrims(tenantId, categoryId);
+    return c.json(trims);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car trims", error: error.message }, 500);
+  }
+};
+
+export const getCarTrimById = async (c: Context) => {
+  const tenantId = c.get("tenantId");
+  const { id } = c.req.param();
+  try {
+    const trim = await carsService.getCarTrimById(tenantId, id);
+    if (trim) {
+      return c.json(trim);
+    }
+    return c.json({ message: "Car trim not found" }, 404);
+  } catch (error: any) {
+    return c.json({ message: "Error fetching car trim", error: error.message }, 500);
+  }
+};
diff --git a/packages/car-management-api/src/api/app/features/cars/index.ts b/packages/car-management-api/src/api/app/features/cars/index.ts
new file mode 100644
index 0000000..f896e8d
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/cars/index.ts
@@ -0,0 +1,10 @@
+import { Hono } from "hono";
+import carsAppRoutes from "./routes";
+
+const carsAppApi = new Hono();
+
+carsAppApi.route("/", carsAppRoutes);
+
+// Later, other app car-related routes can be added here.
+
+export default carsAppApi;
diff --git a/packages/car-management-api/src/api/app/features/cars/routes.ts b/packages/car-management-api/src/api/app/features/cars/routes.ts
new file mode 100644
index 0000000..a535bd5
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/cars/routes.ts
@@ -0,0 +1,27 @@
+import { Hono } from "hono";
+import {
+  getAllCarCategories,
+  getAllCarTrims,
+  getAllVehicleScenarios,
+  getCarCategoryById,
+  getCarTrimById,
+  getVehicleScenarioById,
+} from "./controller";
+
+const carsAppRoutes = new Hono();
+
+// All app routes related to cars will be defined and exported from here.
+
+// VehicleScenario Routes
+carsAppRoutes.get("/vehicle-scenarios", getAllVehicleScenarios);
+carsAppRoutes.get("/vehicle-scenarios/:id", getVehicleScenarioById);
+
+// CarCategory Routes
+carsAppRoutes.get("/car-categories", getAllCarCategories);
+carsAppRoutes.get("/car-categories/:id", getCarCategoryById);
+
+// CarTrim Routes
+carsAppRoutes.get("/car-categories/:categoryId/trims", getAllCarTrims);
+carsAppRoutes.get("/car-trims/:id", getCarTrimById);
+
+export default carsAppRoutes;
diff --git a/packages/car-management-api/src/api/app/features/cars/schema.ts b/packages/car-management-api/src/api/app/features/cars/schema.ts
new file mode 100644
index 0000000..e80a85e
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/cars/schema.ts
@@ -0,0 +1 @@
+// Zod schemas for car-related App API validation will be defined here.
diff --git a/packages/car-management-api/src/api/app/features/users/controller.ts b/packages/car-management-api/src/api/app/features/users/controller.ts
new file mode 100644
index 0000000..7aaca77
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/users/controller.ts
@@ -0,0 +1,30 @@
+import { wechatClient } from "@/lib/wechat";
+import * as appUserService from "@/modules/users/app-user.service";
+import type { User } from "@prisma/client";
+import type { Context } from "hono";
+import { HTTPException } from "hono/http-exception";
+import type { AppAuthEnv } from "../../middleware/auth";
+import type { UpdatePhoneNumberInput } from "./schema";
+
+export const getCurrentUser = async (c: Context<AppAuthEnv>) => {
+  const user = c.get("user");
+  return c.json(user);
+};
+
+export const updatePhoneNumber = async (c: Context) => {
+  const user = c.get("user") as User;
+  const { code } = c.get("validatedData") as UpdatePhoneNumberInput;
+
+  try {
+    const { phoneNumber } = (await wechatClient.getPhoneNumber(code)) ?? {};
+    if (!phoneNumber) {
+      throw new HTTPException(400, { message: "Invalid code from wechat" });
+    }
+    const updatedUser = await appUserService.updatePhoneNumber(user.tenantId, user.openId, phoneNumber);
+    return c.json(updatedUser);
+  } catch (error: any) {
+    console.error("Update phone number error:", error);
+    if (error instanceof HTTPException) throw error;
+    throw new HTTPException(500, { message: "Error updating phone number", cause: error });
+  }
+};
diff --git a/packages/car-management-api/src/api/app/features/users/routes.ts b/packages/car-management-api/src/api/app/features/users/routes.ts
new file mode 100644
index 0000000..be57b7c
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/users/routes.ts
@@ -0,0 +1,15 @@
+import { zValidator } from "@hono/zod-validator";
+import { Hono } from "hono";
+import { appAuthMiddleware } from "../../middleware/auth";
+import { getCurrentUser, updatePhoneNumber } from "./controller";
+import { updatePhoneNumberSchema } from "./schema";
+
+const appUserRoutes = new Hono();
+
+// All routes here are protected
+appUserRoutes.use("*", appAuthMiddleware);
+
+appUserRoutes.get("/current", getCurrentUser);
+appUserRoutes.post("/current/phone-number", zValidator("json", updatePhoneNumberSchema), updatePhoneNumber);
+
+export default appUserRoutes;
diff --git a/packages/car-management-api/src/api/app/features/users/schema.ts b/packages/car-management-api/src/api/app/features/users/schema.ts
new file mode 100644
index 0000000..1b98470
--- /dev/null
+++ b/packages/car-management-api/src/api/app/features/users/schema.ts
@@ -0,0 +1,7 @@
+import { z } from "zod";
+
+export const updatePhoneNumberSchema = z.object({
+  code: z.string(),
+});
+
+export type UpdatePhoneNumberInput = z.infer<typeof updatePhoneNumberSchema>;
diff --git a/packages/car-management-api/src/api/app/index.ts b/packages/car-management-api/src/api/app/index.ts
new file mode 100644
index 0000000..a761280
--- /dev/null
+++ b/packages/car-management-api/src/api/app/index.ts
@@ -0,0 +1,16 @@
+import { Hono, type Context } from "hono";
+import appAuthRoutes from "./features/auth/routes";
+import carsAppApi from "./features/cars";
+import appUserRoutes from "./features/users/routes";
+
+const app = new Hono();
+
+// Mount the app features
+app.route("/auth", appAuthRoutes);
+app.route("/users", appUserRoutes);
+app.route("/cars", carsAppApi);
+
+// 后续将在此处聚合所有 app 功能路由
+app.get("/", (c: Context) => c.json({ message: "Welcome to App API" }));
+
+export default app;
diff --git a/packages/car-management-api/src/api/app/middleware/auth.ts b/packages/car-management-api/src/api/app/middleware/auth.ts
new file mode 100644
index 0000000..865c116
--- /dev/null
+++ b/packages/car-management-api/src/api/app/middleware/auth.ts
@@ -0,0 +1,40 @@
+import * as appAuthService from "@/modules/auth/app-auth.service";
+import type { User } from "@prisma/client";
+import { type Context, type Next } from "hono";
+import { createMiddleware } from "hono/factory";
+import { HTTPException } from "hono/http-exception";
+
+// Define the shape of the JWT payload for app users
+export interface AppJwtPayload {
+  id: string;
+  tenantId: string;
+  openId: string;
+}
+
+// Define the shape of the environment for authenticated app routes
+export type AppAuthEnv = {
+  Variables: {
+    user: User;
+    tenantId: string;
+  };
+};
+
+export const appAuthMiddleware = createMiddleware<AppAuthEnv>(async (c: Context<AppAuthEnv>, next: Next) => {
+  const authHeader = c.req.header("authorization");
+  const token = authHeader?.split(" ")[1];
+
+  if (!token) {
+    throw new HTTPException(401, { message: "No token provided" });
+  }
+
+  const user = await appAuthService.verifyToken(token);
+
+  if (!user) {
+    throw new HTTPException(401, { message: "Invalid token" });
+  }
+
+  c.set("user", user);
+  c.set("tenantId", user.tenantId);
+
+  await next();
+});
diff --git a/packages/car-management-api/src/cloud/qcloudCos.ts b/packages/car-management-api/src/cloud/qcloudCos.ts
deleted file mode 100644
index 9d78ca2..0000000
--- a/packages/car-management-api/src/cloud/qcloudCos.ts
+++ /dev/null
@@ -1,48 +0,0 @@
-import STS from "qcloud-cos-sts";
-
-export const createQcloudImgUploadToken = async (tenantId: string) => {
-  const config = {
-    // 腾讯云 SecretId, 用于访问腾讯云 API
-    secretId: process.env.QCLOUD_SECRET_ID!,
-    // 腾讯云 SecretKey, 用于访问腾讯云 API
-    secretKey: process.env.QCLOUD_SECRET_KEY!,
-    // 腾讯云 COS Bucket 名称
-    bucket: process.env.QCLOUD_COS_BUCKET!,
-    // 腾讯云 COS Bucket 所在地域
-    region: process.env.QCLOUD_COS_REGION!,
-    // 腾讯云 AppId
-    appId: process.env.QCLOUD_APP_ID!,
-    //  STS token有效期, 单位为s
-    durationSeconds: 900,
-    // 前端直传时，COS key 的前缀
-    uploadDir: `tenants/${tenantId}/uploads`,
-  };
-
-  const policy = {
-    version: "2.0",
-    statement: [
-      {
-        action: ["name/cos:PutObject"],
-        effect: "allow",
-        resource: [`qcs::cos:${config.region}:uid/${config.appId}:${config.bucket}/${config.uploadDir}/*`],
-      },
-    ],
-  };
-
-  const sts = await STS.getCredential({
-    secretId: config.secretId,
-    secretKey: config.secretKey,
-    policy: policy,
-    durationSeconds: config.durationSeconds,
-  });
-
-  return {
-    secretId: sts.credentials.tmpSecretId,
-    secretKey: sts.credentials.tmpSecretKey,
-    sessionToken: sts.credentials.sessionToken,
-    region: config.region,
-    bucket: config.bucket,
-    expiredTime: sts.expiredTime,
-    startTime: sts.startTime,
-  };
-};
diff --git a/packages/car-management-api/src/controllers/admin/admin-user.controller.ts b/packages/car-management-api/src/controllers/admin/admin-user.controller.ts
deleted file mode 100644
index af763f1..0000000
--- a/packages/car-management-api/src/controllers/admin/admin-user.controller.ts
+++ /dev/null
@@ -1,109 +0,0 @@
-import type { OmitPasswordHash } from "@/types/typeHelper";
-import type { AdminUser } from "@prisma/client";
-import type { Request, Response } from "express";
-import * as adminUserService from "../../services/admin-user.service";
-
-export const hasAdminManipulationPermission = (
-  user: OmitPasswordHash<AdminUser>,
-  targetUser: OmitPasswordHash<AdminUser>,
-): boolean => {
-  switch (user.role) {
-    case "super_admin":
-      return true;
-    case "admin":
-      return targetUser.role !== "super_admin";
-    case "tenant_admin":
-      return targetUser.role !== "super_admin" && targetUser.role !== "admin" && targetUser.tenantId === user.tenantId;
-    case "tenant_viewer":
-      return false;
-    default:
-      return false;
-  }
-};
-
-// GET /api/v1/admin/admin-users/current
-export const getCurrentAdminUser = async (req: Request, res: Response) => {
-  res.json(req.adminUser);
-};
-
-// GET /api/v1/admin/admin-users
-export const getAllAdminUsers = async (req: Request, res: Response) => {
-  try {
-    const users = (await adminUserService.getAllAdminUsers()).filter((user) =>
-      hasAdminManipulationPermission(req.adminUser!, user),
-    );
-    res.json(users);
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching admin users" });
-  }
-};
-
-// GET /api/v1/admin/admin-users/:id
-export const getAdminUserById = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    const user = await adminUserService.getAdminUserById(id);
-    if (hasAdminManipulationPermission(req.adminUser!, user!)) {
-      res.status(403).json({ message: "Forbidden" });
-      return;
-    }
-    if (user) {
-      res.json(user);
-    } else {
-      res.status(404).json({ message: "Admin user not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching admin user" });
-  }
-};
-
-// POST /api/v1/admin/admin-users
-export const createAdminUser = async (req: Request, res: Response) => {
-  try {
-    const { adminUser } = req;
-    if (!hasAdminManipulationPermission(adminUser!, req.body)) {
-      res.status(403).json({ message: "Forbidden" });
-      return;
-    }
-    const newUser = await adminUserService.createAdminUser(req.body);
-    res.status(201).json(newUser);
-  } catch (error) {
-    res.status(500).json({ message: "Error creating admin user" });
-  }
-};
-
-// PUT /api/v1/admin/admin-users/:id
-export const updateAdminUser = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    const { adminUser } = req;
-    if (!hasAdminManipulationPermission(adminUser!, req.body)) {
-      res.status(403).json({ message: "Forbidden" });
-      return;
-    }
-    const updatedUser = await adminUserService.updateAdminUser(id, req.body);
-    if (updatedUser) {
-      res.json(updatedUser);
-    } else {
-      res.status(404).json({ message: "Admin user not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error updating admin user" });
-  }
-};
-
-// DELETE /api/v1/admin/admin-users/:id
-export const deleteAdminUser = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    const { adminUser } = req;
-    if (!hasAdminManipulationPermission(adminUser!, req.body)) {
-      res.status(403).json({ message: "Forbidden" });
-      return;
-    }
-    await adminUserService.deleteAdminUser(id);
-    res.status(204).send();
-  } catch (error) {
-    res.status(500).json({ message: "Error deleting admin user" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/auth.controller.ts b/packages/car-management-api/src/controllers/admin/auth.controller.ts
deleted file mode 100644
index c1902fe..0000000
--- a/packages/car-management-api/src/controllers/admin/auth.controller.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import type { Request, Response } from "express";
-import * as authService from "../../services/admin/auth.service";
-
-export const login = async (req: Request, res: Response) => {
-  try {
-    const { username, password } = req.body;
-    const { token, user } = (await authService.login(username, password)) ?? {};
-    if (token) {
-      res.json({ token, user });
-    } else {
-      res.status(401).json({ message: "Invalid credentials" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error logging in" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/car-category.controller.ts b/packages/car-management-api/src/controllers/admin/car-category.controller.ts
deleted file mode 100644
index 4a49b34..0000000
--- a/packages/car-management-api/src/controllers/admin/car-category.controller.ts
+++ /dev/null
@@ -1,69 +0,0 @@
-import type { Request, Response } from "express";
-import * as carCategoryService from "../../services/car-category.service";
-import { tenantIdFromRequest } from "../../utils/tenant-id";
-
-// GET /api/v1/admin/car-categories
-export const getAllCarCategories = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const carCategories = await carCategoryService.getAllCarCategories(tenantId);
-    res.json(carCategories);
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching car categories" });
-  }
-};
-
-// GET /api/v1/admin/car-categories/:id
-export const getCarCategoryById = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const carCategory = await carCategoryService.getCarCategoryById(tenantId, id);
-    if (carCategory) {
-      res.json(carCategory);
-    } else {
-      res.status(404).json({ message: "Car category not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching car category" });
-  }
-};
-
-// POST /api/v1/admin/car-categories
-export const createCarCategory = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const newCarCategory = await carCategoryService.createCarCategory(tenantId, req.body);
-    res.status(201).json(newCarCategory);
-  } catch (error) {
-    res.status(500).json({ message: "Error creating car category" });
-  }
-};
-
-// PUT /api/v1/admin/car-categories/:id
-export const updateCarCategory = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const updatedCarCategory = await carCategoryService.updateCarCategory(tenantId, id, req.body);
-    if (updatedCarCategory) {
-      res.json(updatedCarCategory);
-    } else {
-      res.status(404).json({ message: "Car category not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error updating car category" });
-  }
-};
-
-// DELETE /api/v1/admin/car-categories/:id
-export const deleteCarCategory = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    await carCategoryService.deleteCarCategory(tenantId, id);
-    res.status(204).send();
-  } catch (error) {
-    res.status(500).json({ message: "Error deleting car category" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/car-trim.controller.ts b/packages/car-management-api/src/controllers/admin/car-trim.controller.ts
deleted file mode 100644
index 6905baa..0000000
--- a/packages/car-management-api/src/controllers/admin/car-trim.controller.ts
+++ /dev/null
@@ -1,77 +0,0 @@
-import type { Request, Response } from "express";
-import * as carTrimService from "../../services/car-trim.service";
-import { tenantIdFromRequest } from "../../utils/tenant-id";
-
-// GET /api/v1/admin/car-categories/:categoryId/trims
-export const getAllCarTrims = async (req: Request, res: Response) => {
-  try {
-    debugger;
-    const tenantId = tenantIdFromRequest(req);
-    const { categoryId } = req.params;
-    const carTrims = await carTrimService.getAllCarTrims(tenantId, categoryId);
-    debugger;
-    res.json(carTrims);
-  } catch (error) {
-    debugger;
-    res.status(500).json({ message: "Error fetching car trims" });
-  }
-};
-
-// GET /api/v1/admin/car-trims/:id
-export const getCarTrimById = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const carTrim = await carTrimService.getCarTrimById(tenantId, id);
-    if (carTrim) {
-      res.json(carTrim);
-    } else {
-      res.status(404).json({ message: "Car trim not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching car trim" });
-  }
-};
-
-// POST /api/v1/admin/car-categories/:categoryId/trims
-export const createCarTrim = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { categoryId } = req.params;
-    const newCarTrim = await carTrimService.createCarTrim(tenantId, {
-      ...req.body,
-      category: { connect: { id: categoryId } },
-    });
-    res.status(201).json(newCarTrim);
-  } catch (error) {
-    res.status(500).json({ message: "Error creating car trim" });
-  }
-};
-
-// PUT /api/v1/admin/car-trims/:id
-export const updateCarTrim = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const updatedCarTrim = await carTrimService.updateCarTrim(tenantId, id, req.body);
-    if (updatedCarTrim) {
-      res.json(updatedCarTrim);
-    } else {
-      res.status(404).json({ message: "Car trim not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error updating car trim" });
-  }
-};
-
-// DELETE /api/v1/admin/car-trims/:id
-export const deleteCarTrim = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    await carTrimService.deleteCarTrim(tenantId, id);
-    res.status(204).send();
-  } catch (error) {
-    res.status(500).json({ message: "Error deleting car trim" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/img.controller.ts b/packages/car-management-api/src/controllers/admin/img.controller.ts
deleted file mode 100644
index efd79e4..0000000
--- a/packages/car-management-api/src/controllers/admin/img.controller.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { createQcloudImgUploadToken } from "@/cloud/qcloudCos";
-import { tenantIdFromRequest } from "@/utils/tenant-id";
-import type { Request, Response } from "express";
-
-export const getImgUploadToken = async (req: Request, res: Response) => {
-  const tenantId = tenantIdFromRequest(req);
-  try {
-    const configWithToken = await createQcloudImgUploadToken(tenantId);
-    res.json(configWithToken);
-  } catch (e) {
-    console.log(e);
-    res.status(500).send("Failed to get upload token");
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/tenant.controller.ts b/packages/car-management-api/src/controllers/admin/tenant.controller.ts
deleted file mode 100644
index c696728..0000000
--- a/packages/car-management-api/src/controllers/admin/tenant.controller.ts
+++ /dev/null
@@ -1,84 +0,0 @@
-import type { OmitPasswordHash } from "@/types/typeHelper";
-import type { AdminUser } from "@prisma/client";
-import type { Request, Response } from "express";
-import * as tenantService from "../../services/tenant.service";
-
-const hasTenantViewPermission = (user: OmitPasswordHash<AdminUser>, tenantId: string): boolean => {
-  switch (user.role) {
-    case "super_admin":
-    case "admin":
-      return true;
-    case "tenant_admin":
-    case "tenant_viewer":
-      return tenantId === user.tenantId;
-    default:
-      return false;
-  }
-};
-
-// GET /api/v1/admin/tenants
-export const getAllTenants = async (req: Request, res: Response) => {
-  try {
-    const tenants = (await tenantService.getAllTenants()).filter((tenant) =>
-      hasTenantViewPermission(req.adminUser!, tenant.id),
-    );
-    res.json(tenants);
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching tenants" });
-  }
-};
-
-// GET /api/v1/admin/tenants/:id
-export const getTenantById = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    if (!hasTenantViewPermission(req.adminUser!, id)) {
-      res.status(403).json({ message: "Forbidden" });
-      return;
-    }
-    const tenant = await tenantService.getTenantById(id);
-    if (tenant) {
-      res.json(tenant);
-    } else {
-      res.status(404).json({ message: "Tenant not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching tenant" });
-  }
-};
-
-// POST /api/v1/admin/tenants
-export const createTenant = async (req: Request, res: Response) => {
-  try {
-    const newTenant = await tenantService.createTenant(req.body);
-    res.status(201).json(newTenant);
-  } catch (error) {
-    res.status(500).json({ message: "Error creating tenant" });
-  }
-};
-
-// PUT /api/v1/admin/tenants/:id
-export const updateTenant = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    const updatedTenant = await tenantService.updateTenant(id, req.body);
-    if (updatedTenant) {
-      res.json(updatedTenant);
-    } else {
-      res.status(404).json({ message: "Tenant not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error updating tenant" });
-  }
-};
-
-// DELETE /api/v1/admin/tenants/:id
-export const deleteTenant = async (req: Request, res: Response) => {
-  try {
-    const { id } = req.params;
-    await tenantService.deleteTenant(id);
-    res.status(204).send();
-  } catch (error) {
-    res.status(500).json({ message: "Error deleting tenant" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/user.controller.ts b/packages/car-management-api/src/controllers/admin/user.controller.ts
deleted file mode 100644
index 9914e63..0000000
--- a/packages/car-management-api/src/controllers/admin/user.controller.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import type { Request, Response } from "express";
-import * as userService from "../../services/admin/user.service";
-import { tenantIdFromRequest } from "../../utils/tenant-id";
-
-export const getAllUsers = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const users = await userService.getAllUsers(tenantId);
-    res.json(users);
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching users" });
-  }
-};
-
-export const getUserById = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const user = await userService.getUserById(tenantId, id);
-    if (user) {
-      res.json(user);
-    } else {
-      res.status(404).json({ message: "User not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching user" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/admin/vehicle-scenario.controller.ts b/packages/car-management-api/src/controllers/admin/vehicle-scenario.controller.ts
deleted file mode 100644
index 61872af..0000000
--- a/packages/car-management-api/src/controllers/admin/vehicle-scenario.controller.ts
+++ /dev/null
@@ -1,69 +0,0 @@
-import type { Request, Response } from "express";
-import * as vehicleScenarioService from "../../services/vehicle-scenario.service";
-import { tenantIdFromRequest } from "../../utils/tenant-id";
-
-// GET /api/v1/admin/vehicle-scenarios
-export const getAllVehicleScenarios = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const vehicleScenarios = await vehicleScenarioService.getAllVehicleScenarios(tenantId);
-    res.json(vehicleScenarios);
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching vehicle scenarios" });
-  }
-};
-
-// GET /api/v1/admin/vehicle-scenarios/:id
-export const getVehicleScenarioById = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const vehicleScenario = await vehicleScenarioService.getVehicleScenarioById(tenantId, id);
-    if (vehicleScenario) {
-      res.json(vehicleScenario);
-    } else {
-      res.status(404).json({ message: "Vehicle scenario not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error fetching vehicle scenario" });
-  }
-};
-
-// POST /api/v1/admin/vehicle-scenarios
-export const createVehicleScenario = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const newVehicleScenario = await vehicleScenarioService.createVehicleScenario(tenantId, req.body);
-    res.status(201).json(newVehicleScenario);
-  } catch (error) {
-    res.status(500).json({ message: "Error creating vehicle scenario" });
-  }
-};
-
-// PUT /api/v1/admin/vehicle-scenarios/:id
-export const updateVehicleScenario = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    const updatedVehicleScenario = await vehicleScenarioService.updateVehicleScenario(tenantId, id, req.body);
-    if (updatedVehicleScenario) {
-      res.json(updatedVehicleScenario);
-    } else {
-      res.status(404).json({ message: "Vehicle scenario not found" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error updating vehicle scenario" });
-  }
-};
-
-// DELETE /api/v1/admin/vehicle-scenarios/:id
-export const deleteVehicleScenario = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { id } = req.params;
-    await vehicleScenarioService.deleteVehicleScenario(tenantId, id);
-    res.status(204).send();
-  } catch (error) {
-    res.status(500).json({ message: "Error deleting vehicle scenario" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/app/auth.controller.ts b/packages/car-management-api/src/controllers/app/auth.controller.ts
deleted file mode 100644
index e8cd31b..0000000
--- a/packages/car-management-api/src/controllers/app/auth.controller.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import { tenantIdFromRequest } from "@/utils/tenant-id";
-import { wechatClient } from "@/wechat/client";
-import type { Request, Response } from "express";
-import * as authService from "../../services/app/auth.service";
-
-export const login = async (req: Request, res: Response) => {
-  try {
-    const tenantId = tenantIdFromRequest(req);
-    const { code } = req.body;
-    const { openid, unionid } = await wechatClient.code2Session(code);
-    const { token, user } = (await authService.login(tenantId, openid, unionid)) ?? {};
-    if (token) {
-      res.json({ token, user });
-    } else {
-      res.status(401).json({ message: "Invalid credentials" });
-    }
-  } catch (error) {
-    res.status(500).json({ message: "Error logging in" });
-  }
-};
diff --git a/packages/car-management-api/src/controllers/app/car.controller.ts b/packages/car-management-api/src/controllers/app/car.controller.ts
deleted file mode 100644
index af7d1ae..0000000
--- a/packages/car-management-api/src/controllers/app/car.controller.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export { getAllCarCategories, getCarCategoryById } from "../admin/car-category.controller";
-export { getAllCarTrims, getCarTrimById } from "../admin/car-trim.controller";
-export { getAllVehicleScenarios, getVehicleScenarioById } from "../admin/vehicle-scenario.controller";
diff --git a/packages/car-management-api/src/controllers/app/user.controller.ts b/packages/car-management-api/src/controllers/app/user.controller.ts
deleted file mode 100644
index 59b67a1..0000000
--- a/packages/car-management-api/src/controllers/app/user.controller.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import type { Request, Response } from "express";
-
-import * as userService from "@/services/app/user.service";
-import { wechatClient } from "@/wechat/client";
-
-export const getCurrentUser = async (req: Request, res: Response) => {
-  res.json(req.user);
-};
-
-export const updatePhoneNumber = async (req: Request, res: Response) => {
-  const { openId, tenantId } = req.user!;
-  const { code } = req.body;
-  try {
-    const { phoneNumber } = (await wechatClient.getPhoneNumber(code)) ?? {};
-    if (!phoneNumber) {
-      res.status(400).json({ message: "Invalid code" });
-      return;
-    }
-    const user = await userService.updatePhoneNumber(tenantId, openId, phoneNumber);
-    res.json(user);
-  } catch (error) {
-    res.status(500).json({ message: "Error updating phone number" });
-  }
-};
diff --git a/packages/car-management-api/src/index.ts b/packages/car-management-api/src/index.ts
index 867d0d1..2602b35 100644
--- a/packages/car-management-api/src/index.ts
+++ b/packages/car-management-api/src/index.ts
@@ -1,18 +1,26 @@
-import express from "express";
-import adminRoutes from "./routes/admin.route";
-// import appRoutes from './routes/app.route';
+import { serve } from "@hono/node-server";
+import { Hono, type Context } from "hono";
+import adminRoutes from "./api/admin";
+import appRoutes from "./api/app";
 
-const app = express();
-const port = process.env.PORT || 3000;
+const app = new Hono().basePath("/api/v1");
 
-app.use(express.json());
-app.use("/api/v1/admin", adminRoutes);
-// app.use('/api/v1/app', appRoutes);
+// Mount the admin and app routes
+app.route("/admin", adminRoutes);
+app.route("/app", appRoutes);
 
-export { app };
+app.get("/", (c: Context) => {
+  return c.text("Hello Hono!");
+});
+
+const port = Number(process.env.PORT) || 3000;
 
 if (process.env.NODE_ENV !== "test") {
-  app.listen(port, () => {
-    console.log(`Server is running on port ${port}`);
+  serve({
+    fetch: app.fetch,
+    port,
   });
+  console.log(`Server is running on http://localhost:${port}`);
 }
+
+export default app;
diff --git a/packages/car-management-api/src/db/client.ts b/packages/car-management-api/src/lib/db.ts
similarity index 100%
rename from packages/car-management-api/src/db/client.ts
rename to packages/car-management-api/src/lib/db.ts
diff --git a/packages/car-management-api/src/cloud/aliyunOss.ts b/packages/car-management-api/src/lib/oss-sts.ts
similarity index 59%
rename from packages/car-management-api/src/cloud/aliyunOss.ts
rename to packages/car-management-api/src/lib/oss-sts.ts
index 2882a42..3ee461e 100644
--- a/packages/car-management-api/src/cloud/aliyunOss.ts
+++ b/packages/car-management-api/src/lib/oss-sts.ts
@@ -1,4 +1,52 @@
 import OSS from "ali-oss";
+import STS from "qcloud-cos-sts";
+
+export const createQcloudImgUploadToken = async (tenantId: string) => {
+  const config = {
+    // 腾讯云 SecretId, 用于访问腾讯云 API
+    secretId: process.env.QCLOUD_SECRET_ID!,
+    // 腾讯云 SecretKey, 用于访问腾讯云 API
+    secretKey: process.env.QCLOUD_SECRET_KEY!,
+    // 腾讯云 COS Bucket 名称
+    bucket: process.env.QCLOUD_COS_BUCKET!,
+    // 腾讯云 COS Bucket 所在地域
+    region: process.env.QCLOUD_COS_REGION!,
+    // 腾讯云 AppId
+    appId: process.env.QCLOUD_APP_ID!,
+    //  STS token有效期, 单位为s
+    durationSeconds: 900,
+    // 前端直传时，COS key 的前缀
+    uploadDir: `tenants/${tenantId}/uploads`,
+  };
+
+  const policy = {
+    version: "2.0",
+    statement: [
+      {
+        action: ["name/cos:PutObject"],
+        effect: "allow",
+        resource: [`qcs::cos:${config.region}:uid/${config.appId}:${config.bucket}/${config.uploadDir}/*`],
+      },
+    ],
+  };
+
+  const sts = await STS.getCredential({
+    secretId: config.secretId,
+    secretKey: config.secretKey,
+    policy: policy,
+    durationSeconds: config.durationSeconds,
+  });
+
+  return {
+    secretId: sts.credentials.tmpSecretId,
+    secretKey: sts.credentials.tmpSecretKey,
+    sessionToken: sts.credentials.sessionToken,
+    region: config.region,
+    bucket: config.bucket,
+    expiredTime: sts.expiredTime,
+    startTime: sts.startTime,
+  };
+};
 
 export const createAliyunImgUploadToken = async (tenantId: string) => {
   const config = {
diff --git a/packages/car-management-api/src/utils/transform.ts b/packages/car-management-api/src/lib/transform.ts
similarity index 100%
rename from packages/car-management-api/src/utils/transform.ts
rename to packages/car-management-api/src/lib/transform.ts
diff --git a/packages/car-management-api/src/types/typeHelper.ts b/packages/car-management-api/src/lib/typeHelper.ts
similarity index 100%
rename from packages/car-management-api/src/types/typeHelper.ts
rename to packages/car-management-api/src/lib/typeHelper.ts
diff --git a/packages/car-management-api/src/wechat/client.ts b/packages/car-management-api/src/lib/wechat.ts
similarity index 100%
rename from packages/car-management-api/src/wechat/client.ts
rename to packages/car-management-api/src/lib/wechat.ts
diff --git a/packages/car-management-api/src/modules/auth/app-auth.service.ts b/packages/car-management-api/src/modules/auth/app-auth.service.ts
new file mode 100644
index 0000000..72505bf
--- /dev/null
+++ b/packages/car-management-api/src/modules/auth/app-auth.service.ts
@@ -0,0 +1,41 @@
+import type { AppJwtPayload } from "@/api/app/middleware/auth";
+import { prisma } from "@/lib/db";
+import type { User } from "@prisma/client";
+import jwt from "jsonwebtoken";
+
+const jwtSecret = process.env.JWT_SECRET || "your-default-secret";
+
+export const loginOrRegister = async (
+  tenantId: string,
+  openId: string,
+  unionId?: string,
+): Promise<{ token: string; user: User }> => {
+  let user = await prisma.user.findUnique({ where: { tenantId_openId: { tenantId, openId } } });
+
+  if (!user) {
+    user = await prisma.user.create({
+      data: {
+        tenantId,
+        openId,
+        unionId,
+        nickname: `用户${openId.slice(-4)}`,
+        avatarUrl: "",
+        phoneNumber: "",
+      },
+    });
+  }
+
+  const payload: AppJwtPayload = { id: user.id, tenantId, openId };
+  const token = jwt.sign(payload, jwtSecret, { expiresIn: "30d" });
+  return { token, user };
+};
+
+export const verifyToken = async (token: string): Promise<User | null> => {
+  try {
+    const { id } = jwt.verify(token, jwtSecret) as AppJwtPayload;
+    const user = await prisma.user.findUnique({ where: { id } });
+    return user;
+  } catch (error) {
+    return null;
+  }
+};
diff --git a/packages/car-management-api/src/modules/auth/auth.service.ts b/packages/car-management-api/src/modules/auth/auth.service.ts
new file mode 100644
index 0000000..a16b6f1
--- /dev/null
+++ b/packages/car-management-api/src/modules/auth/auth.service.ts
@@ -0,0 +1,38 @@
+import type { AdminJwtPayload } from "@/api/admin/middleware/auth";
+import { prisma } from "@/lib/db";
+import { verifyPassword } from "@/lib/transform";
+import type { AdminUser } from "@prisma/client";
+import jwt from "jsonwebtoken";
+
+const jwtSecret = process.env.JWT_SECRET || "your-default-secret";
+
+// Helper to remove password hash
+const excludePasswordHash = (user: AdminUser): Omit<AdminUser, "passwordHash"> => {
+  const { passwordHash, ...userWithoutPassword } = user;
+  return userWithoutPassword;
+};
+
+export const login = async (
+  username: string,
+  password: string,
+): Promise<{ token: string; user: Omit<AdminUser, "passwordHash"> } | null> => {
+  const user = await prisma.adminUser.findUnique({ where: { username } });
+
+  if (user && verifyPassword(password, user.passwordHash)) {
+    const payload: AdminJwtPayload = { id: user.id };
+    const token = jwt.sign(payload, jwtSecret, { expiresIn: "24h" }); // Extended token validity
+    return { token, user: excludePasswordHash(user) };
+  }
+
+  return null;
+};
+
+export const verifyToken = async (token: string): Promise<Omit<AdminUser, "passwordHash"> | null> => {
+  try {
+    const { id } = jwt.verify(token, jwtSecret) as AdminJwtPayload;
+    const user = await prisma.adminUser.findUnique({ where: { id } });
+    return user ? excludePasswordHash(user) : null;
+  } catch (error) {
+    return null; // Token is invalid or expired
+  }
+};
diff --git a/packages/car-management-api/src/modules/cars/cars.service.ts b/packages/car-management-api/src/modules/cars/cars.service.ts
new file mode 100644
index 0000000..d0dccde
--- /dev/null
+++ b/packages/car-management-api/src/modules/cars/cars.service.ts
@@ -0,0 +1,142 @@
+import { type CarCategory, type CarTrim, type VehicleScenario, Prisma } from "@prisma/client";
+import { createTenantPrismaClient } from "../../lib/db";
+
+// This service will contain all business logic related to cars,
+// including categories, trims, and scenarios.
+
+export const getAllCarCategories = async (tenantId: string): Promise<CarCategory[]> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carCategory.findMany();
+};
+
+export const getCarCategoryById = async (tenantId: string, id: string): Promise<CarCategory | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carCategory.findUnique({ where: { id } });
+};
+
+export const createCarCategory = async (
+  tenantId: string,
+  data: Omit<Prisma.CarCategoryCreateInput, "tenant" | "vehicleScenarios">,
+): Promise<CarCategory> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carCategory.create({
+    data: {
+      ...data,
+      tenant: {
+        connect: {
+          id: tenantId,
+        },
+      },
+    },
+  });
+};
+
+export const updateCarCategory = async (
+  tenantId: string,
+  id: string,
+  data: Omit<Prisma.CarCategoryUpdateInput, "tenant" | "vehicleScenarios">,
+): Promise<CarCategory | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carCategory.update({
+    where: { id },
+    data,
+  });
+};
+
+export const deleteCarCategory = async (tenantId: string, id: string): Promise<void> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  await prisma.carCategory.delete({ where: { id } });
+};
+
+export const getAllCarTrims = async (tenantId: string, categoryId: string): Promise<CarTrim[]> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carTrim.findMany({ where: { categoryId } });
+};
+
+export const getCarTrimById = async (tenantId: string, id: string): Promise<CarTrim | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carTrim.findUnique({ where: { id } });
+};
+
+type CarTrimCreateData = Omit<Prisma.CarTrimCreateInput, "tenant" | "category"> & { categoryId: string };
+
+export const createCarTrim = async (tenantId: string, data: CarTrimCreateData): Promise<CarTrim> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  const { categoryId, ...restData } = data;
+  return prisma.carTrim.create({
+    data: {
+      ...restData,
+      tenant: {
+        connect: {
+          id: tenantId,
+        },
+      },
+      category: {
+        connect: {
+          id: categoryId,
+        },
+      },
+    },
+  });
+};
+
+export const updateCarTrim = async (
+  tenantId: string,
+  id: string,
+  data: Omit<Prisma.CarTrimUpdateInput, "tenant" | "category">,
+): Promise<CarTrim | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.carTrim.update({
+    where: { id },
+    data,
+  });
+};
+
+export const deleteCarTrim = async (tenantId: string, id: string): Promise<void> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  await prisma.carTrim.delete({ where: { id } });
+};
+
+export const getAllVehicleScenarios = async (tenantId: string): Promise<VehicleScenario[]> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.vehicleScenario.findMany();
+};
+
+export const getVehicleScenarioById = async (tenantId: string, id: string): Promise<VehicleScenario | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.vehicleScenario.findUnique({ where: { id } });
+};
+
+export const createVehicleScenario = async (
+  tenantId: string,
+  data: { name: string; description: string; image: string },
+): Promise<VehicleScenario> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.vehicleScenario.create({
+    data: {
+      ...data,
+      tenant: {
+        connect: {
+          id: tenantId,
+        },
+      },
+    },
+  });
+};
+
+export const updateVehicleScenario = async (
+  tenantId: string,
+  id: string,
+  data: Prisma.VehicleScenarioUpdateInput,
+): Promise<VehicleScenario | null> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  return prisma.vehicleScenario.update({
+    where: { id },
+    data,
+  });
+};
+
+export const deleteVehicleScenario = async (tenantId: string, id: string): Promise<void> => {
+  const prisma = createTenantPrismaClient(tenantId);
+  await prisma.vehicleScenario.delete({ where: { id } });
+};
diff --git a/packages/car-management-api/src/modules/cars/cars.types.ts b/packages/car-management-api/src/modules/cars/cars.types.ts
new file mode 100644
index 0000000..5e0f84e
--- /dev/null
+++ b/packages/car-management-api/src/modules/cars/cars.types.ts
@@ -0,0 +1,4 @@
+import type { CarCategory as PrismaCarCategory, CarTrim as PrismaCarTrim } from "@prisma/client";
+
+export type CarCategory = PrismaCarCategory;
+export type CarTrim = PrismaCarTrim;
diff --git a/packages/car-management-api/src/services/tenant.service.ts b/packages/car-management-api/src/modules/tenants/tenant.service.ts
similarity index 60%
rename from packages/car-management-api/src/services/tenant.service.ts
rename to packages/car-management-api/src/modules/tenants/tenant.service.ts
index 2895532..8bb0e76 100644
--- a/packages/car-management-api/src/services/tenant.service.ts
+++ b/packages/car-management-api/src/modules/tenants/tenant.service.ts
@@ -1,5 +1,5 @@
-import { type Tenant, Prisma } from "@prisma/client";
-import { prisma } from "../db/client";
+import { prisma } from "@/lib/db";
+import { Prisma, type Tenant } from "@prisma/client";
 
 export const getAllTenants = async (): Promise<Tenant[]> => {
   return prisma.tenant.findMany();
@@ -9,16 +9,11 @@ export const getTenantById = async (id: string): Promise<Tenant | null> => {
   return prisma.tenant.findUnique({ where: { id } });
 };
 
-export const createTenant = async (
-  data: Prisma.TenantCreateInput
-): Promise<Tenant> => {
+export const createTenant = async (data: Prisma.TenantCreateInput): Promise<Tenant> => {
   return prisma.tenant.create({ data });
 };
 
-export const updateTenant = async (
-  id: string,
-  data: Prisma.TenantUpdateInput
-): Promise<Tenant | null> => {
+export const updateTenant = async (id: string, data: Prisma.TenantUpdateInput): Promise<Tenant | null> => {
   return prisma.tenant.update({ where: { id }, data });
 };
 
diff --git a/packages/car-management-api/src/modules/tenants/tenants.types.ts b/packages/car-management-api/src/modules/tenants/tenants.types.ts
new file mode 100644
index 0000000..90e63c8
--- /dev/null
+++ b/packages/car-management-api/src/modules/tenants/tenants.types.ts
@@ -0,0 +1,3 @@
+import type { Tenant as PrismaTenant } from "@prisma/client";
+
+export type Tenant = PrismaTenant;
diff --git a/packages/car-management-api/src/modules/users/admin-user.service.ts b/packages/car-management-api/src/modules/users/admin-user.service.ts
new file mode 100644
index 0000000..d5ece52
--- /dev/null
+++ b/packages/car-management-api/src/modules/users/admin-user.service.ts
@@ -0,0 +1,93 @@
+import { Prisma } from "@prisma/client";
+import type { CreateAdminUserInput, UpdateAdminUserInput } from "../../api/admin/features/admin-users/schema";
+import { prisma } from "../../lib/db";
+import { password2hash, verifyPassword } from "../../lib/transform";
+import type { AdminUser } from "./admin-user.types";
+
+export const getAllAdminUsers = async (): Promise<AdminUser[]> => {
+  return prisma.adminUser.findMany({
+    select: {
+      id: true,
+      username: true,
+      role: true,
+      tenantId: true,
+      createdAt: true,
+      updatedAt: true,
+    },
+  });
+};
+
+export const getAdminUserById = async (id: string): Promise<AdminUser | null> => {
+  return prisma.adminUser.findUnique({
+    where: { id },
+    select: {
+      id: true,
+      username: true,
+      role: true,
+      tenantId: true,
+      createdAt: true,
+      updatedAt: true,
+    },
+  });
+};
+
+export const getAdminUserByUsername = async (username: string): Promise<AdminUser | null> => {
+  const user = await prisma.adminUser.findUnique({
+    where: { username },
+  });
+  if (!user) return null;
+  // eslint-disable-next-line @typescript-eslint/no-unused-vars
+  const { passwordHash, ...rest } = user;
+  return rest;
+};
+
+export const createAdminUser = async (data: CreateAdminUserInput): Promise<AdminUser> => {
+  const passwordHash = password2hash(data.password);
+  const newUser = await prisma.adminUser.create({
+    data: {
+      username: data.username,
+      passwordHash,
+      role: data.role,
+      tenantId: data.tenantId,
+    },
+    select: {
+      id: true,
+      username: true,
+      role: true,
+      tenantId: true,
+      createdAt: true,
+      updatedAt: true,
+    },
+  });
+  return newUser;
+};
+
+export const updateAdminUser = async (id: string, data: UpdateAdminUserInput): Promise<AdminUser> => {
+  const updateData: Prisma.AdminUserUpdateInput = { ...data };
+  if (data.password) {
+    updateData.passwordHash = password2hash(data.password);
+    delete (updateData as Partial<UpdateAdminUserInput>).password;
+  }
+
+  const updatedUser = await prisma.adminUser.update({
+    where: { id },
+    data: updateData,
+    select: {
+      id: true,
+      username: true,
+      role: true,
+      tenantId: true,
+      createdAt: true,
+      updatedAt: true,
+    },
+  });
+  return updatedUser;
+};
+
+export const deleteAdminUser = async (id: string): Promise<void> => {
+  await prisma.adminUser.delete({ where: { id } });
+};
+
+export const verifyAdminUserPassword = async (password: string, hash: string) => {
+  return verifyPassword(password, hash);
+};
diff --git a/packages/car-management-api/src/modules/users/admin-user.types.ts b/packages/car-management-api/src/modules/users/admin-user.types.ts
new file mode 100644
index 0000000..941b728
--- /dev/null
+++ b/packages/car-management-api/src/modules/users/admin-user.types.ts
@@ -0,0 +1,3 @@
+import type { AdminUser as PrismaAdminUser } from "@prisma/client";
+
+export type AdminUser = Omit<PrismaAdminUser, "passwordHash">;
diff --git a/packages/car-management-api/src/modules/users/app-user.service.ts b/packages/car-management-api/src/modules/users/app-user.service.ts
new file mode 100644
index 0000000..6276d16
--- /dev/null
+++ b/packages/car-management-api/src/modules/users/app-user.service.ts
@@ -0,0 +1,10 @@
+import { prisma } from "@/lib/db";
+
+export const updatePhoneNumber = async (tenantId: string, openId: string, phoneNumber: string) => {
+  const user = await prisma.user.findUnique({ where: { tenantId_openId: { tenantId, openId } } });
+  if (!user) {
+    throw new Error("User not found");
+  }
+  const updatedUser = await prisma.user.update({ where: { id: user.id }, data: { phoneNumber } });
+  return updatedUser;
+};
diff --git a/packages/car-management-api/src/services/admin/user.service.ts b/packages/car-management-api/src/modules/users/user.service.ts
similarity index 57%
rename from packages/car-management-api/src/services/admin/user.service.ts
rename to packages/car-management-api/src/modules/users/user.service.ts
index 65e178e..e02e80d 100644
--- a/packages/car-management-api/src/services/admin/user.service.ts
+++ b/packages/car-management-api/src/modules/users/user.service.ts
@@ -1,15 +1,12 @@
-import type { User } from "@prisma/client";
-import { createTenantPrismaClient } from "../../db/client";
+import { createTenantPrismaClient } from "../../lib/db";
+import type { User } from "./user.types";
 
 export const getAllUsers = async (tenantId: string): Promise<User[]> => {
   const prisma = createTenantPrismaClient(tenantId);
   return prisma.user.findMany();
 };
 
-export const getUserById = async (
-  tenantId: string,
-  id: string
-): Promise<User | null> => {
+export const getUserById = async (tenantId: string, id: string): Promise<User | null> => {
   const prisma = createTenantPrismaClient(tenantId);
   return prisma.user.findUnique({ where: { id } });
 };
diff --git a/packages/car-management-api/src/modules/users/user.types.ts b/packages/car-management-api/src/modules/users/user.types.ts
new file mode 100644
index 0000000..9acfce4
--- /dev/null
+++ b/packages/car-management-api/src/modules/users/user.types.ts
@@ -0,0 +1,3 @@
+import type { User as PrismaUser } from "@prisma/client";
+
+export type User = PrismaUser;
diff --git a/packages/car-management-api/src/routes/admin.route.ts b/packages/car-management-api/src/routes/admin.route.ts
deleted file mode 100644
index 460a9c4..0000000
--- a/packages/car-management-api/src/routes/admin.route.ts
+++ /dev/null
@@ -1,97 +0,0 @@
-import {
-  createCarCategory,
-  deleteCarCategory,
-  getAllCarCategories,
-  getCarCategoryById,
-  updateCarCategory,
-} from "@/controllers/admin/car-category.controller";
-import {
-  createCarTrim,
-  deleteCarTrim,
-  getAllCarTrims,
-  getCarTrimById,
-  updateCarTrim,
-} from "@/controllers/admin/car-trim.controller";
-import { getAllUsers, getUserById } from "@/controllers/admin/user.controller";
-import {
-  createVehicleScenario,
-  deleteVehicleScenario,
-  getAllVehicleScenarios,
-  getVehicleScenarioById,
-  updateVehicleScenario,
-} from "@/controllers/admin/vehicle-scenario.controller";
-
-import { getImgUploadToken } from "@/controllers/admin/img.controller";
-import {
-  createTenant,
-  deleteTenant,
-  getAllTenants,
-  getTenantById,
-  updateTenant,
-} from "@/controllers/admin/tenant.controller";
-import { superAdminPermission, tenantManipulationPermission } from "@/middleware/admin/permission.middleware";
-import { Router } from "express";
-import {
-  createAdminUser,
-  deleteAdminUser,
-  getAdminUserById,
-  getAllAdminUsers,
-  getCurrentAdminUser,
-  updateAdminUser,
-} from "../controllers/admin/admin-user.controller";
-import { login } from "../controllers/admin/auth.controller";
-import { authenticate } from "../middleware/admin/auth.middleware";
-
-const router = Router();
-
-// Auth Routes
-// POST /api/admin/auth/login - Admin user login
-router.post("/auth/login", login);
-
-// Apply authentication middleware to all routes below
-router.use(authenticate);
-
-// Tenant Management Routes
-router.post("/tenants", superAdminPermission, createTenant);
-router.get("/tenants", getAllTenants);
-router.get("/tenants/:id", getTenantById);
-router.put("/tenants/:id", superAdminPermission, tenantManipulationPermission, updateTenant);
-router.delete("/tenants/:id", superAdminPermission, tenantManipulationPermission, deleteTenant);
-
-// VehicleScenario Routes
-router.post("/vehicle-scenarios", tenantManipulationPermission, createVehicleScenario);
-router.get("/vehicle-scenarios", getAllVehicleScenarios);
-router.get("/vehicle-scenarios/:id", getVehicleScenarioById);
-router.put("/vehicle-scenarios/:id", tenantManipulationPermission, updateVehicleScenario);
-router.delete("/vehicle-scenarios/:id", tenantManipulationPermission, deleteVehicleScenario);
-
-// CarCategory Routes
-router.post("/car-categories", tenantManipulationPermission, createCarCategory);
-router.get("/car-categories", getAllCarCategories);
-router.get("/car-categories/:id", getCarCategoryById);
-router.put("/car-categories/:id", tenantManipulationPermission, updateCarCategory);
-router.delete("/car-categories/:id", tenantManipulationPermission, deleteCarCategory);
-
-// CarTrim Routes
-router.post("/car-categories/:categoryId/trims", tenantManipulationPermission, createCarTrim);
-router.get("/car-categories/:categoryId/trims", getAllCarTrims);
-router.get("/car-trims/:id", getCarTrimById);
-router.put("/car-trims/:id", tenantManipulationPermission, updateCarTrim);
-router.delete("/car-trims/:id", tenantManipulationPermission, deleteCarTrim);
-
-// AdminUser Management Routes
-router.get("/admin-users/current", getCurrentAdminUser);
-router.post("/admin-users", createAdminUser);
-router.get("/admin-users", getAllAdminUsers);
-router.get("/admin-users/:id", getAdminUserById);
-router.put("/admin-users/:id", updateAdminUser);
-router.delete("/admin-users/:id", deleteAdminUser);
-
-// User Management Routes
-router.get("/users", getAllUsers);
-router.get("/users/:id", getUserById);
-
-// Img Management Routes
-router.get("/img/upload-token", tenantManipulationPermission, getImgUploadToken);
-
-export default router;
diff --git a/packages/car-management-api/src/routes/app.route.ts b/packages/car-management-api/src/routes/app.route.ts
deleted file mode 100644
index ae44b21..0000000
--- a/packages/car-management-api/src/routes/app.route.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { login } from "@/controllers/app/auth.controller";
-import {
-  getAllCarCategories,
-  getAllCarTrims,
-  getAllVehicleScenarios,
-  getCarCategoryById,
-  getCarTrimById,
-  getVehicleScenarioById,
-} from "@/controllers/app/car.controller";
-import { getCurrentUser, updatePhoneNumber } from "@/controllers/app/user.controller";
-import { authenticate } from "@/middleware/app/auth.middleware";
-import { Router } from "express";
-
-const router = Router();
-
-// Auth Routes
-// POST /api/app/auth/login - miniprogram user login
-router.post("/auth/login", login);
-
-// User Routes
-router.get("/users/current", getCurrentUser);
-router.post("/users/current/phone-number", updatePhoneNumber);
-
-// Apply authentication middleware to all routes below
-router.use(authenticate);
-
-// VehicleScenario Routes
-router.get("/vehicle-scenarios", getAllVehicleScenarios);
-router.get("/vehicle-scenarios/:id", getVehicleScenarioById);
-
-// CarCategory Routes;
-router.get("/car-categories", getAllCarCategories);
-router.get("/car-categories/:id", getCarCategoryById);
-
-// CarTrim Routes
-router.get("/car-categories/:categoryId/trims", getAllCarTrims);
-router.get("/car-trims/:id", getCarTrimById);
-
-export default router;
diff --git a/packages/car-management-api/src/services/admin-user.service.ts b/packages/car-management-api/src/services/admin-user.service.ts
deleted file mode 100644
index 7736938..0000000
--- a/packages/car-management-api/src/services/admin-user.service.ts
+++ /dev/null
@@ -1,71 +0,0 @@
-import { type AdminRole, type AdminUser, Prisma } from "@prisma/client";
-
-import { type OmitPasswordHash, type ReplacePasswordHash } from "@/types/typeHelper";
-import { prisma } from "../db/client";
-import { password2hash } from "../utils/transform";
-
-// Helper to remove password hash
-const excludePasswordHash = <T extends AdminUser>(user: T): OmitPasswordHash<T> => {
-  const { passwordHash, ...userWithoutPassword } = user;
-  return {
-    ...userWithoutPassword,
-    role: userWithoutPassword.role as AdminRole,
-  };
-};
-
-export const getAllAdminUsers = async (): Promise<OmitPasswordHash<AdminUser>[]> => {
-  const users = (await prisma.adminUser.findMany()) as AdminUser[];
-  return users.map(excludePasswordHash);
-};
-
-export const getAllAdminUsersByRolesAndTenantId = async (
-  roles: AdminRole[],
-  tenantId?: string,
-): Promise<OmitPasswordHash<AdminUser>[]> => {
-  const users = (await prisma.adminUser.findMany({
-    where: {
-      role: { in: roles },
-      tenantId: tenantId,
-    },
-  })) as AdminUser[];
-  return users.map(excludePasswordHash);
-};
-
-export const getAdminUserById = async (id: string): Promise<OmitPasswordHash<AdminUser> | null> => {
-  const user = (await prisma.adminUser.findUnique({
-    where: { id },
-  })) as AdminUser | null;
-  return user ? excludePasswordHash(user) : null;
-};
-
-export const createAdminUser = async (
-  data: ReplacePasswordHash<Prisma.AdminUserCreateInput>,
-): Promise<OmitPasswordHash<AdminUser>> => {
-  const { password, ...rest } = data;
-  const newUser = await prisma.adminUser.create({
-    data: {
-      ...rest,
-      passwordHash: password2hash(password),
-    },
-  });
-  return excludePasswordHash(newUser);
-};
-
-export const updateAdminUser = async (
-  id: string,
-  data: ReplacePasswordHash<Prisma.AdminUserUpdateInput>,
-): Promise<OmitPasswordHash<AdminUser> | null> => {
-  const { password, ...rest } = data;
-  if (password) {
-    (rest as Prisma.AdminUserUpdateInput).passwordHash = password2hash(password);
-  }
-  const updatedUser = await prisma.adminUser.update({
-    where: { id },
-    data: rest,
-  });
-  return updatedUser ? excludePasswordHash(updatedUser) : null;
-};
-
-export const deleteAdminUser = async (id: string): Promise<void> => {
-  await prisma.adminUser.delete({ where: { id } });
-};
diff --git a/packages/car-management-api/src/services/admin/auth.service.ts b/packages/car-management-api/src/services/admin/auth.service.ts
deleted file mode 100644
index 8daf5bc..0000000
--- a/packages/car-management-api/src/services/admin/auth.service.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import type { AdminUser } from "@prisma/client";
-import jwt from "jsonwebtoken";
-import { prisma } from "../../db/client";
-import type { AdminJwtPayload } from "../../types/interface";
-import { verifyPassword } from "../../utils/transform";
-
-const jwtSecret = process.env.JWT_SECRET || "your-default-secret";
-
-export const login = async (username: string, password: string): Promise<{ token: string; user: AdminUser } | null> => {
-  const user = await prisma.adminUser.findUnique({ where: { username } });
-
-  if (user && verifyPassword(password, user.passwordHash)) {
-    const payload: AdminJwtPayload = { id: user.id };
-    // 是不是因该把 tenantId 也放进去？
-    const token = jwt.sign(payload, jwtSecret, { expiresIn: "1h" });
-    return { token, user };
-  }
-
-  return null;
-};
-
-export const verify = async (token: string): Promise<AdminUser | null> => {
-  const { id } = jwt.verify(token, jwtSecret) as AdminJwtPayload;
-  const user = await prisma.adminUser.findUnique({ where: { id } });
-  return user as AdminUser | null;
-};
diff --git a/packages/car-management-api/src/services/app/auth.service.ts b/packages/car-management-api/src/services/app/auth.service.ts
deleted file mode 100644
index d8491e3..0000000
--- a/packages/car-management-api/src/services/app/auth.service.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import type { User } from "@prisma/client";
-import jwt from "jsonwebtoken";
-
-import { prisma } from "../../db/client";
-import type { AppJwtPayload } from "../../types/interface";
-
-const jwtSecret = process.env.JWT_SECRET || "your-default-secret";
-
-export const login = async (
-  tenantId: string,
-  openId: string,
-  unionId?: string,
-): Promise<{ token: string; user: User } | null> => {
-  let user = await prisma.user.findUnique({ where: { tenantId_openId: { tenantId, openId } } });
-  if (!user) {
-    user = await prisma.user.create({
-      data: { tenantId, openId, unionId, nickname: "", avatarUrl: "", phoneNumber: "" },
-    });
-  }
-  if (user) {
-    const payload: AppJwtPayload = { id: user.id, tenantId, openId };
-    const token = jwt.sign(payload, jwtSecret, { expiresIn: "1h" });
-    return { token, user };
-  }
-
-  return null;
-};
-
-export const verify = async (token: string): Promise<User | null> => {
-  const { id } = jwt.verify(token, jwtSecret) as AppJwtPayload;
-  const user = await prisma.user.findUnique({ where: { id } });
-  return user as User | null;
-};
diff --git a/packages/car-management-api/src/services/app/user.service.ts b/packages/car-management-api/src/services/app/user.service.ts
deleted file mode 100644
index 38b55ee..0000000
--- a/packages/car-management-api/src/services/app/user.service.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { createTenantPrismaClient, prisma } from "@/db/client";
-import type { User } from "@prisma/client";
-
-export const updatePhoneNumber = async (tenantId: string, openId: string, phoneNumber: string) => {
-  const user = await prisma.user.findUnique({ where: { tenantId_openId: { tenantId, openId } } });
-  if (!user) {
-    throw new Error("User not found");
-  }
-  await prisma.user.update({ where: { id: user.id }, data: { phoneNumber } });
-};
-
-export const getUserById = async (tenantId: string, id: string): Promise<User | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.user.findUnique({ where: { id } });
-};
diff --git a/packages/car-management-api/src/services/car-category.service.ts b/packages/car-management-api/src/services/car-category.service.ts
deleted file mode 100644
index 9dded67..0000000
--- a/packages/car-management-api/src/services/car-category.service.ts
+++ /dev/null
@@ -1,45 +0,0 @@
-import { type CarCategory, Prisma } from "@prisma/client";
-import { createTenantPrismaClient } from "../db/client";
-
-export const getAllCarCategories = async (
-  tenantId: string
-): Promise<CarCategory[]> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carCategory.findMany();
-};
-
-export const getCarCategoryById = async (
-  tenantId: string,
-  id: string
-): Promise<CarCategory | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carCategory.findUnique({ where: { id } });
-};
-
-export const createCarCategory = async (
-  tenantId: string,
-  data: Prisma.CarCategoryCreateInput
-): Promise<CarCategory> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carCategory.create({ data });
-};
-
-export const updateCarCategory = async (
-  tenantId: string,
-  id: string,
-  data: Prisma.CarCategoryUpdateInput
-): Promise<CarCategory | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carCategory.update({
-    where: { id },
-    data,
-  });
-};
-
-export const deleteCarCategory = async (
-  tenantId: string,
-  id: string
-): Promise<void> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  await prisma.carCategory.delete({ where: { id } });
-};
diff --git a/packages/car-management-api/src/services/car-trim.service.ts b/packages/car-management-api/src/services/car-trim.service.ts
deleted file mode 100644
index 84817e4..0000000
--- a/packages/car-management-api/src/services/car-trim.service.ts
+++ /dev/null
@@ -1,35 +0,0 @@
-import { type CarTrim, Prisma } from "@prisma/client";
-import { createTenantPrismaClient } from "../db/client";
-
-export const getAllCarTrims = async (tenantId: string, categoryId: string): Promise<CarTrim[]> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carTrim.findMany({ where: { categoryId } });
-};
-
-export const getCarTrimById = async (tenantId: string, id: string): Promise<CarTrim | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carTrim.findUnique({ where: { id } });
-};
-
-export const createCarTrim = async (tenantId: string, data: Prisma.CarTrimCreateInput): Promise<CarTrim> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  debugger;
-  return prisma.carTrim.create({ data });
-};
-
-export const updateCarTrim = async (
-  tenantId: string,
-  id: string,
-  data: Prisma.CarTrimUpdateInput,
-): Promise<CarTrim | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.carTrim.update({
-    where: { id },
-    data,
-  });
-};
-
-export const deleteCarTrim = async (tenantId: string, id: string): Promise<void> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  await prisma.carTrim.delete({ where: { id } });
-};
diff --git a/packages/car-management-api/src/services/vehicle-scenario.service.ts b/packages/car-management-api/src/services/vehicle-scenario.service.ts
deleted file mode 100644
index 5e04de1..0000000
--- a/packages/car-management-api/src/services/vehicle-scenario.service.ts
+++ /dev/null
@@ -1,45 +0,0 @@
-import { type VehicleScenario, Prisma } from "@prisma/client";
-import { createTenantPrismaClient } from "../db/client";
-
-export const getAllVehicleScenarios = async (
-  tenantId: string
-): Promise<VehicleScenario[]> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.vehicleScenario.findMany();
-};
-
-export const getVehicleScenarioById = async (
-  tenantId: string,
-  id: string
-): Promise<VehicleScenario | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.vehicleScenario.findUnique({ where: { id } });
-};
-
-export const createVehicleScenario = async (
-  tenantId: string,
-  data: Prisma.VehicleScenarioCreateInput
-): Promise<VehicleScenario> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.vehicleScenario.create({ data });
-};
-
-export const updateVehicleScenario = async (
-  tenantId: string,
-  id: string,
-  data: Prisma.VehicleScenarioUpdateInput
-): Promise<VehicleScenario | null> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  return prisma.vehicleScenario.update({
-    where: { id },
-    data,
-  });
-};
-
-export const deleteVehicleScenario = async (
-  tenantId: string,
-  id: string
-): Promise<void> => {
-  const prisma = createTenantPrismaClient(tenantId);
-  await prisma.vehicleScenario.delete({ where: { id } });
-};
diff --git a/packages/car-management-api/src/types/interface.ts b/packages/car-management-api/src/types/interface.ts
deleted file mode 100644
index 7ef52da..0000000
--- a/packages/car-management-api/src/types/interface.ts
+++ /dev/null
@@ -1,91 +0,0 @@
-// export interface CarFeature {
-//   icon: string;
-//   text: string;
-// }
-
-// export interface CarTrim {
-//   id: string;
-//   tenantId: string;
-//   name: string;
-//   subtitle: string;
-//   image: string;
-//   badge?: string;
-//   originalPrice: string;
-//   currentPrice: string;
-//   features: CarFeature[];
-// }
-
-// export interface CarCategory {
-//   id: string;
-//   tenantId: string;
-//   name: string;
-//   image: string;
-//   carTrims: CarTrim[];
-//   badge?: string;
-//   tags: string[];
-//   highlights: CarFeature[];
-//   interiorImages: string[];
-//   exteriorImages: string[];
-//   offerPictures: string[];
-// }
-
-// // 车辆使用场景: "家用"、"商用"、"公务" 等等
-// export interface VehicleScenario {
-//   id: string;
-//   tenantId: string;
-//   name: string;
-//   description: string;
-//   image: string;
-//   categories: CarCategory[];
-// }
-
-// export interface Tenant {
-//   id: string;
-//   // 租户名称: 太平洋保险、公安部门等
-//   name: string;
-//   // 小程序的唯一ID
-//   appId: string;
-//   // 小程序的 AppSecret
-//   appSecret: string;
-//   // 状态
-//   status: 'active' | 'inactive';
-//   // 个性化配置
-//   config: Record<string, unknown>;
-// }
-
-// export interface User {
-//   id: string;
-//   tenantId: string;
-//   nickname: string;
-//   avatarUrl: string;
-//   phoneNumber: string;
-//   // 微信用户的 OpenID
-//   openId: string;
-//   // 微信unionID（跨应用统一标识）
-//   unionId: string;
-// }
-
-// export type AdminUserRole = 'super_admin' | 'admin' | 'tenant_admin' | 'tenant_viewer';
-
-// export interface AdminUser {
-//   id: string;
-//   username: string;
-//   passwordHash: string;
-//   // super_admin: 可以管理所有东西
-//   // admin: 相当于所有 tenant_admin, 可以管理租户下的所有东西, 但是不能管理租户本身（新增、修改租户等）
-//   // tenant_admin: 只能管理某个租户下的所有东西
-//   // tenant_viewer: 只能查看某个租户下的所有东西
-//   role: AdminUserRole;
-//   // 'super_admin' 和 'admin' 没有 tenantId
-//   tenantId?: string;
-// }
-
-export interface AdminJwtPayload {
-  id: string;
-}
-
-export interface AppJwtPayload {
-  id: string;
-  tenantId: string;
-  openId: string;
-}
diff --git a/packages/car-management-api/src/utils/tenant-id.ts b/packages/car-management-api/src/utils/tenant-id.ts
deleted file mode 100644
index 2d1f4dd..0000000
--- a/packages/car-management-api/src/utils/tenant-id.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import type { Request } from "express";
-
-export const tenantIdFromRequest = (req: Request): string => {
-  if (req.user && req.user.tenantId) {
-    return req.user.tenantId;
-  }
-
-  // For super_admin, tenantId might be in the body for creation operations
-  if (req.body.tenantId) {
-    return req.body.tenantId;
-  }
-
-  // For super_admin, tenantId might be in the query for list operations
-  if (req.query.tenantId && typeof req.query.tenantId === "string") {
-    return req.query.tenantId;
-  }
-
-  throw new Error("Tenant ID could not be determined from the request.");
-};
